import { __decorate, __metadata, __read } from "tslib";
import { Injectable, Renderer2 } from '@angular/core';
import { FileUploadTypes } from './../helpers/file-types.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
import * as ɵngcc0 from '@angular/core';
var FileUploadService = /** @class */ (function () {
    function FileUploadService(renderer) {
        this.renderer = renderer;
        this.extensions = ['B', 'KB', 'MB', 'GB'];
        this.sizeRegex = new RegExp("^(\\d+)(?:\\s{0,1})(" + this.extensions.join('|') + ")?$", 'i');
    }
    FileUploadService.prototype.isFileDragDropAvailable = function () {
        var div = this.renderer.createElement('div');
        return (('draggable' in div) || ('ondragstart' in div && 'ondrop' in div));
    };
    FileUploadService.prototype.parseSize = function (value) {
        if (IsNullOrEmpty(value)) {
            return 0;
        }
        if (typeof value === 'number') {
            return value;
        }
        var _a = __read(value.match(this.sizeRegex) || [null, '0', 'B'], 3), size = _a[1], extension = _a[2];
        var i = IsNullOrEmpty(extension) ? 0 : this.extensions.indexOf(extension.toUpperCase());
        return parseInt(size, 10) * Math.pow(1024, i < 0 ? 0 : i);
    };
    FileUploadService.prototype.formatSize = function (size) {
        return this.calculateSize(size);
    };
    FileUploadService.prototype.calculateSize = function (size, extensionIndex) {
        if (extensionIndex === void 0) { extensionIndex = 0; }
        if (isNaN(size)) {
            size = 0;
        }
        if (size < 1024) {
            return Math.round(size * 100) / 100 + " " + this.extensions[extensionIndex];
        }
        return this.calculateSize(size / 1024, extensionIndex + 1);
    };
    FileUploadService.prototype.getFileType = function (file) {
        return Object.keys(FileUploadTypes).find(function (key) { return FileUploadTypes[key] === file.type; });
    };
    FileUploadService.ctorParameters = function () { return [
        { type: Renderer2 }
    ]; };
    FileUploadService = __decorate([ __metadata("design:paramtypes", [Renderer2])
    ], FileUploadService);
FileUploadService.ɵfac = function FileUploadService_Factory(t) { return new (t || FileUploadService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2)); };
FileUploadService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: FileUploadService, factory: function (t) { return FileUploadService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc0.Renderer2 }]; }, null); })();
    return FileUploadService;
}());
export { FileUploadService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS11cGxvYWQuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiQGlwbGFiL25neC1maWxlLXVwbG9hZC9saWIvc2VydmljZXMvZmlsZS11cGxvYWQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFLM0Q7QUFFbUIsSUFJZiwyQkFBb0IsUUFBbUI7QUFDM0MsUUFEd0IsYUFBUSxHQUFSLFFBQVEsQ0FBVztBQUFDLFFBSnZCLGVBQVUsR0FBaUIsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN4RSxRQUNxQixjQUFTLEdBQUcsSUFBSSxNQUFNLENBQUMseUJBQXVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDeEcsSUFFSSxDQUFDO0FBQ0wsSUFDVyxtREFBdUIsR0FBOUI7QUFBYyxRQUNWLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3ZELFFBQVEsT0FBTyxDQUFDLENBQUMsV0FBVyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLEdBQUcsSUFBSSxRQUFRLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNuRixJQUFJLENBQUM7QUFFTCxJQUFXLHFDQUFTLEdBQWhCLFVBQWlCLEtBQXNCO0FBQUksUUFDdkMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDbEMsWUFBWSxPQUFPLENBQUMsQ0FBQztBQUNyQixTQUFTO0FBQ1QsUUFDUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtBQUN2QyxZQUFZLE9BQU8sS0FBSyxDQUFDO0FBQ3pCLFNBQVM7QUFDVCxRQUNjLElBQUEsK0RBQXFFLEVBQWxFLFlBQUksRUFBRSxpQkFBNEQsQ0FBQztBQUNwRixRQUFRLElBQU0sQ0FBQyxHQUFJLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFXLENBQUMsQ0FBQztBQUM1RyxRQUNRLE9BQU8sUUFBUSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xFLElBQUksQ0FBQztBQUVMLElBQVcsc0NBQVUsR0FBakIsVUFBa0IsSUFBWTtBQUFJLFFBQzlCLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxJQUFJLENBQUM7QUFFTCxJQUFZLHlDQUFhLEdBQXJCLFVBQXNCLElBQVksRUFBRSxjQUEwQjtBQUFJLFFBQTlCLCtCQUFBLEVBQUEsa0JBQTBCO0FBQUksUUFDOUQsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDekIsWUFBWSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLFNBQVM7QUFDVCxRQUNRLElBQUksSUFBSSxHQUFHLElBQUksRUFBRTtBQUN6QixZQUFZLE9BQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxTQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFHLENBQUM7QUFDeEYsU0FBUztBQUNULFFBQ1EsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsY0FBYyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ25FLElBQUksQ0FBQztBQUVMLElBQVcsdUNBQVcsR0FBbEIsVUFBbUIsSUFBVTtBQUFJLFFBQzdCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxHQUFHLElBQUssT0FBQSxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDO0FBQzlGLElBQUksQ0FBQztBQUNKO0FBQzRELGdCQTNDM0IsU0FBUztBQUFHO0FBRzVDLElBVFcsaUJBQWlCLHdCQUQ3QixVQUFVLEVBQUUsckJBQ0wsa0NBTTBCLFNBQVM7QUFBRyxPQU5qQyxpQkFBaUIsQ0FnRDdCOzs7OzswRUFDRDtBQUFDLElBREQsd0JBQUM7QUFDQSxDQURBLEFBaERELElBZ0RDOztBQXZEQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFNQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBR0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBekNBLEFBQUEsQUFOQSxBQUFBLEFBREEsQUFBQSxBQUFBLEFBT0EsQUFBQSxBQU5BLEFBQUEsQUFnREEsQUFBQSxBQUFBLEFBQUEsQUFoREEsQUFnREEsQUFoREEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWxlVXBsb2FkVHlwZXMgfSBmcm9tICcuLy4uL2hlbHBlcnMvZmlsZS10eXBlcy5jbGFzcyc7XHJcbmltcG9ydCB7IElzTnVsbE9yRW1wdHkgfSBmcm9tICcuLy4uL2hlbHBlcnMvaGVscGVycy5jbGFzcyc7XHJcblxyXG5leHBvcnQgdHlwZSBJU2l6ZSA9ICdCJyB8ICdLQicgfCAnTUInIHwgJ0dCJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZpbGVVcGxvYWRTZXJ2aWNlIHtcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGV4dGVuc2lvbnM6IEFycmF5PElTaXplPiA9IFsnQicsICdLQicsICdNQicsICdHQiddO1xyXG5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2l6ZVJlZ2V4ID0gbmV3IFJlZ0V4cChgXihcXFxcZCspKD86XFxcXHN7MCwxfSkoJHt0aGlzLmV4dGVuc2lvbnMuam9pbignfCcpfSk/JGAsICdpJyk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzRmlsZURyYWdEcm9wQXZhaWxhYmxlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IHRoaXMucmVuZGVyZXIuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgcmV0dXJuICgoJ2RyYWdnYWJsZScgaW4gZGl2KSB8fCAoJ29uZHJhZ3N0YXJ0JyBpbiBkaXYgJiYgJ29uZHJvcCcgaW4gZGl2KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhcnNlU2l6ZSh2YWx1ZTogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoSXNOdWxsT3JFbXB0eSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBbLCBzaXplLCBleHRlbnNpb25dID0gdmFsdWUubWF0Y2godGhpcy5zaXplUmVnZXgpIHx8IFtudWxsLCAnMCcsICdCJ107XHJcbiAgICAgICAgY29uc3QgaSA9ICBJc051bGxPckVtcHR5KGV4dGVuc2lvbikgPyAwIDogdGhpcy5leHRlbnNpb25zLmluZGV4T2YoZXh0ZW5zaW9uLnRvVXBwZXJDYXNlKCkgYXMgSVNpemUpO1xyXG5cclxuICAgICAgICByZXR1cm4gcGFyc2VJbnQoc2l6ZSwgMTApICogTWF0aC5wb3coMTAyNCwgaSA8IDAgPyAwIDogaSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGZvcm1hdFNpemUoc2l6ZTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVTaXplKHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlU2l6ZShzaXplOiBudW1iZXIsIGV4dGVuc2lvbkluZGV4OiBudW1iZXIgPSAwKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAoaXNOYU4oc2l6ZSkpIHtcclxuICAgICAgICAgICAgc2l6ZSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2l6ZSA8IDEwMjQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke01hdGgucm91bmQoc2l6ZSAqIDEwMCkgLyAxMDB9ICR7dGhpcy5leHRlbnNpb25zW2V4dGVuc2lvbkluZGV4XX1gO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlU2l6ZShzaXplIC8gMTAyNCwgZXh0ZW5zaW9uSW5kZXggKyAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0RmlsZVR5cGUoZmlsZTogRmlsZSk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKEZpbGVVcGxvYWRUeXBlcykuZmluZCgoa2V5KSA9PiBGaWxlVXBsb2FkVHlwZXNba2V5XSA9PT0gZmlsZS50eXBlKTtcclxuICAgIH1cclxufVxyXG4iXX0=