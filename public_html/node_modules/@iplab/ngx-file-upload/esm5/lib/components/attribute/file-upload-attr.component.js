import { __decorate, __metadata, __param } from "tslib";
import { Input, OnInit, ElementRef, HostListener, Renderer2, OnDestroy, HostBinding, Inject, ViewChild, ContentChild, TemplateRef, Component, AfterViewInit } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { FileUploadControl } from '../../helpers/control.class';
import { IsNullOrEmpty } from '../../helpers/helpers.class';
import { FileUploadService } from '../../services/file-upload.service';
import { DRAGOVER, TOUCHED } from './../multiple-file-upload/file-upload.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/file-upload.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../drop-zone/file-upload-drop-zone.component';

var _c0 = ["placeholder"];
var _c1 = ["overlay"];
var _c2 = ["file-drop-zone", ""];
function FileUploadAttributeComponent_div_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
function FileUploadAttributeComponent_div_1_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "file-upload-drop-zone");
    ɵngcc0.ɵɵelementStart(1, "b");
    ɵngcc0.ɵɵtext(2, "Drop");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtext(3, " it here ");
    ɵngcc0.ɵɵelementEnd();
} }
function FileUploadAttributeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1, 2);
    ɵngcc0.ɵɵelementStart(2, "div", 3);
    ɵngcc0.ɵɵtemplate(3, FileUploadAttributeComponent_div_1_ng_container_3_Template, 1, 0, "ng-container", 4);
    ɵngcc0.ɵɵtemplate(4, FileUploadAttributeComponent_div_1_ng_template_4_Template, 4, 0, "ng-template", null, 5, ɵngcc0.ɵɵtemplateRefExtractor);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var _r3 = ɵngcc0.ɵɵreference(5);
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.templateRef ? ctx_r0.templateRef : _r3);
} }
var _c3 = ["*"];
var FileUploadAttributeComponent = /** @class */ (function () {
    function FileUploadAttributeComponent(fileUploadService, hostElementRef, renderer, document) {
        var _this = this;
        this.fileUploadService = fileUploadService;
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.document = document;
        this.control = null;
        this.templateRef = null;
        this.hooks = [];
        this.subscriptions = [];
        this.onTouch = function () {
            _this.renderer.addClass(_this.hostElementRef.nativeElement, TOUCHED);
        };
    }
    FileUploadAttributeComponent.prototype.ngOnInit = function () {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
    };
    FileUploadAttributeComponent.prototype.ngAfterViewInit = function () {
        if (this.fileUploadService.isFileDragDropAvailable()) {
            this.setEvents();
            this.checkAndMarkAsDisabled();
        }
    };
    FileUploadAttributeComponent.prototype.ngOnDestroy = function () {
        this.hooks.forEach(function (hook) { return hook(); });
        this.hooks.length = 0;
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions.length = 0;
    };
    Object.defineProperty(FileUploadAttributeComponent.prototype, "hasFiles", {
        get: function () {
            return this.control.isListVisible && this.control.size > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileUploadAttributeComponent.prototype, "isInvalid", {
        get: function () {
            return !this.control.disabled && this.control.invalid;
        },
        enumerable: true,
        configurable: true
    });
    FileUploadAttributeComponent.prototype.setEvents = function () {
        var _this = this;
        ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.document, eventName, function (event) { return _this.preventDragEvents(event); }));
        });
        ['dragover', 'dragenter'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) { return _this.onDragOver(event); }));
        });
        ['dragleave', 'dragend', 'drop'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.hostElementRef.nativeElement, eventName, function (event) {
                if (_this.control.disabled && eventName === 'dragleave' || eventName !== 'dragleave') {
                    _this.onDragLeave(event);
                }
            }));
        });
        ['dragleave'].forEach(function (eventName) {
            _this.hooks.push(_this.renderer.listen(_this.overlay.nativeElement, eventName, function (event) { return _this.onDragLeave(event); }));
        });
        this.subscriptions.push(this.control.statusChanges.subscribe(function (status) { return _this.checkAndMarkAsDisabled(); }));
    };
    FileUploadAttributeComponent.prototype.checkAndMarkAsDisabled = function () {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
        }
    };
    FileUploadAttributeComponent.prototype.preventDragEvents = function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * on file over add class name
     */
    FileUploadAttributeComponent.prototype.onDragOver = function (event) {
        this.renderer.addClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    /**
     * on mouse out remove class name
     */
    FileUploadAttributeComponent.prototype.onDragLeave = function (event) {
        this.renderer.removeClass(this.hostElementRef.nativeElement, DRAGOVER);
    };
    FileUploadAttributeComponent.prototype.onDrop = function (event) {
        if (this.control.disabled) {
            return;
        }
        var files = event.dataTransfer.files;
        this.control.addFiles(files);
        this.onTouch();
    };
    FileUploadAttributeComponent.ctorParameters = function () { return [
        { type: FileUploadService },
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", FileUploadControl)
    ], FileUploadAttributeComponent.prototype, "control", void 0);
    __decorate([
        ViewChild('overlay'),
        __metadata("design:type", ElementRef)
    ], FileUploadAttributeComponent.prototype, "overlay", void 0);
    __decorate([
        ContentChild('placeholder'),
        __metadata("design:type", TemplateRef)
    ], FileUploadAttributeComponent.prototype, "templateRef", void 0);
    __decorate([
        HostBinding('class.has-files'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadAttributeComponent.prototype, "hasFiles", null);
    __decorate([
        HostBinding('class.ng-invalid'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [])
    ], FileUploadAttributeComponent.prototype, "isInvalid", null);
    __decorate([
        HostListener('drop', ['$event']),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], FileUploadAttributeComponent.prototype, "onDrop", null);
    FileUploadAttributeComponent = __decorate([ __param(3, Inject(DOCUMENT)),
        __metadata("design:paramtypes", [FileUploadService,
            ElementRef,
            Renderer2, Object])
    ], FileUploadAttributeComponent);
FileUploadAttributeComponent.ɵfac = function FileUploadAttributeComponent_Factory(t) { return new (t || FileUploadAttributeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
FileUploadAttributeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: FileUploadAttributeComponent, selectors: [["", "file-drop-zone", ""]], contentQueries: function FileUploadAttributeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, viewQuery: function FileUploadAttributeComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c1, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlay = _t.first);
    } }, hostVars: 4, hostBindings: function FileUploadAttributeComponent_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("drop", function FileUploadAttributeComponent_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("has-files", ctx.hasFiles)("ng-invalid", ctx.isInvalid);
    } }, inputs: { control: "control" }, features: [ɵngcc0.ɵɵProvidersFeature([
            FileUploadService
        ])], attrs: _c2, ngContentSelectors: _c3, decls: 2, vars: 1, consts: [["class", "overlay", 4, "ngIf"], [1, "overlay"], ["overlay", ""], [1, "upload-input"], [4, "ngTemplateOutlet"], ["defaultTemplate", ""]], template: function FileUploadAttributeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, FileUploadAttributeComponent_div_1_Template, 6, 1, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.fileUploadService.isFileDragDropAvailable());
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgTemplateOutlet, ɵngcc3.FileUploadDropZoneComponent], styles: ["[_nghost-%COMP%]{position:relative;display:block}[_nghost-%COMP%]   .overlay[_ngcontent-%COMP%]{display:none;background:rgba(255,255,255,.8);outline:#92b0b3 dashed 2px;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}.dragover[_nghost-%COMP%]:not(.disabled)   .overlay[_ngcontent-%COMP%]{display:block}[_nghost-%COMP%]     .icon{margin:0 auto 10px}[_nghost-%COMP%]     .icon svg{fill:#80a9d2}.upload-input[_ngcontent-%COMP%]{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:.15s ease-in-out}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileUploadAttributeComponent, [{
        type: Component,
        args: [{
                selector: "[file-drop-zone]",
                template: "\n        <ng-content></ng-content>\n        <div #overlay class=\"overlay\" *ngIf=\"fileUploadService.isFileDragDropAvailable()\">\n\n            <div class=\"upload-input\">\n                <ng-container *ngTemplateOutlet=\"templateRef ? templateRef : defaultTemplate\"></ng-container>\n\n                <ng-template #defaultTemplate>\n                    <file-upload-drop-zone>\n                        <b>Drop</b> it here\n                    </file-upload-drop-zone>\n                </ng-template>\n            </div>\n        </div>\n    ",
                providers: [
                    FileUploadService
                ],
                styles: [":host{position:relative;display:block}:host .overlay{display:none;background:rgba(255,255,255,.8);outline:#92b0b3 dashed 2px;outline-offset:-10px;position:absolute;top:0;left:0;right:0;bottom:0}:host(.dragover:not(.disabled)) .overlay{display:block}:host ::ng-deep .icon{margin:0 auto 10px}:host ::ng-deep .icon svg{fill:#80a9d2}.upload-input{pointer-events:none;cursor:pointer;display:inline-block;color:#80a9d2;position:absolute;top:50%;left:50%;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);transition:.15s ease-in-out}"]
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { control: [{
            type: Input
        }], templateRef: [{
            type: ContentChild,
            args: ['placeholder']
        }], hasFiles: [{
            type: HostBinding,
            args: ['class.has-files']
        }], isInvalid: [{
            type: HostBinding,
            args: ['class.ng-invalid']
        }], onDrop: [{
            type: HostListener,
            args: ['drop', ['$event']]
        }], overlay: [{
            type: ViewChild,
            args: ['overlay']
        }] }); })();
    return FileUploadAttributeComponent;
}());
export { FileUploadAttributeComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,