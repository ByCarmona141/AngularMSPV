import { FileUploadControl } from './../helpers/control.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
import * as ɵngcc0 from '@angular/core';
var FileUploadAbstract = /** @class */ (function () {
    function FileUploadAbstract(hostElementRef, renderer, cdr) {
        this.hostElementRef = hostElementRef;
        this.renderer = renderer;
        this.cdr = cdr;
        this.control = null;
        this.isMultiple = true;
        this.hooks = [];
        this.subscriptions = [];
        this.onChange = function () { };
    }
    FileUploadAbstract.prototype.ngOnInit = function () {
        if (IsNullOrEmpty(this.control)) {
            this.control = new FileUploadControl();
        }
        this.setEvents();
        this.checkAndMarkAsDisabled();
        this.checkAndSetMultiple();
        this.connectToForm();
    };
    FileUploadAbstract.prototype.ngOnDestroy = function () {
        this.cdr.detach();
        this.hooks.forEach(function (hook) { return hook(); });
        this.hooks.length = 0;
        this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
        this.subscriptions.length = 0;
    };
    FileUploadAbstract.prototype.setEvents = function () {
        var _this = this;
        this.subscriptions.push(this.control.statusChanges.subscribe(function (status) { return _this.checkAndMarkAsDisabled(); }));
        this.subscriptions.push(this.control.eventsChanges.subscribe(function (event) { return _this.triggerEvent(event); }));
        this.subscriptions.push(this.control.acceptChanges.subscribe(function (accept) { return _this.updateAcceptAttr(accept); }));
        this.subscriptions.push(this.control.multipleChanges.subscribe(function (isMultiple) { return _this.toggleMultiple(isMultiple); }));
    };
    FileUploadAbstract.prototype.clearInputEl = function () {
        this.input.nativeElement.value = null;
    };
    FileUploadAbstract.prototype.checkAndSetMultiple = function () {
        if (!this.control) {
            return;
        }
        var isMultiple = !(this.isMultiple === false || this.isMultiple === 'false');
        if (isMultiple !== this.control.isMultiple) {
            this.control.multiple(isMultiple);
        }
    };
    FileUploadAbstract.prototype.triggerEvent = function (event) {
        if (typeof this.label.nativeElement[event] === 'function') {
            this.label.nativeElement[event]();
        }
    };
    FileUploadAbstract.prototype.updateAcceptAttr = function (accept) {
        if (!IsNullOrEmpty(accept)) {
            this.renderer.setAttribute(this.input.nativeElement, 'accept', accept);
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'accept');
        }
    };
    FileUploadAbstract.prototype.checkAndMarkAsDisabled = function () {
        if (this.control.disabled) {
            this.renderer.addClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', true);
        }
        else {
            this.renderer.removeClass(this.hostElementRef.nativeElement, 'disabled');
            this.renderer.setProperty(this.input.nativeElement, 'disabled', false);
        }
    };
    FileUploadAbstract.prototype.toggleMultiple = function (isMultiple) {
        if (isMultiple) {
            this.renderer.setAttribute(this.input.nativeElement, 'multiple', '');
        }
        else {
            this.renderer.removeAttribute(this.input.nativeElement, 'multiple');
        }
    };
    /**
     * ControlValueAccessor implementation
     */
    FileUploadAbstract.prototype.connectToForm = function () {
        var _this = this;
        this.subscriptions.push(this.control.valueChanges.subscribe(function (v) { return _this.onChange(v); }));
    };
FileUploadAbstract.ɵfac = function FileUploadAbstract_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
FileUploadAbstract.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileUploadAbstract });

    return FileUploadAbstract;
}());
export { FileUploadAbstract };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,