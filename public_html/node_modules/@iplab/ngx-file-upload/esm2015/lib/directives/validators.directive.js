import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './../services/file-upload.service';
var FileSizeValidator_1, FilesLimitValidator_1, FilesAcceptValidator_1;
import { __decorate, __metadata } from "tslib";
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { FileUploadValidators } from './../helpers/validators.class';
import { IsNullOrEmpty } from './../helpers/helpers.class';
import { FileUploadService } from './../services/file-upload.service';
/**
 * A Directive that adds the `filesize` validator to controls marked with the
 * `filesize` attribute. The size of the file is in bytes or any other unit
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel filesize="830000"></file-upload>
 * <file-upload name="files" ngModel [filesize]="830000"></file-upload>
 * <file-upload name="files" ngModel minSize="0" max="6200"></file-upload>
 * <file-upload name="files" ngModel filesize="123MB"></file-upload>
 * <file-upload name="files" ngModel [filesize]="12 mb"></file-upload>
 * <file-upload name="files" ngModel minSize="0" max="324KB"></file-upload>
 * ```
 *
 */
let FileSizeValidator = FileSizeValidator_1 = class FileSizeValidator {
    constructor(fileUploadService) {
        this.fileUploadService = fileUploadService;
    }
    ngOnChanges(changes) {
        if ('filesize' in changes
            || 'maxsize' in changes
            || 'minsize' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    }
    validate(c) {
        return this.validator(c);
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
    _createValidator() {
        let maxSize = null;
        if (!IsNullOrEmpty(this.maxsize)) {
            maxSize = this.fileUploadService.parseSize(this.maxsize);
        }
        else if (!IsNullOrEmpty(this.filesize)) {
            maxSize = this.fileUploadService.parseSize(this.filesize);
        }
        const minSize = this.fileUploadService.parseSize(this.minsize);
        this.validator = FileUploadValidators.sizeRange({ maxSize, minSize });
    }
};
FileSizeValidator.ɵfac = function FileSizeValidator_Factory(t) { return new (t || FileSizeValidator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadService)); };
FileSizeValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FileSizeValidator, selectors: [["file-upload", "filesize", "", "formControlName", ""], ["file-upload", "filesize", "", "formControl", ""], ["file-upload", "filesize", "", "ngModel", ""], ["file-upload", "minsize", "", "formControlName", ""], ["file-upload", "minsize", "", "formControl", ""], ["file-upload", "minsize", "", "ngModel", ""], ["file-upload", "maxsize", "", "formControlName", ""], ["file-upload", "maxsize", "", "formControl", ""], ["file-upload", "maxsize", "", "ngModel", ""]], hostVars: 3, hostBindings: function FileSizeValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("filesize", ctx.filesize ? ctx.filesize : null)("minsize", ctx.minsize ? ctx.minsize : null)("maxsize", ctx.maxsize ? ctx.maxsize : null);
    } }, inputs: { filesize: "filesize", minsize: "minsize", maxsize: "maxsize" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FileSizeValidator_1),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
FileSizeValidator.ctorParameters = () => [
    { type: FileUploadService }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSizeValidator.prototype, "filesize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSizeValidator.prototype, "minsize", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSizeValidator.prototype, "maxsize", void 0);
FileSizeValidator = FileSizeValidator_1 = __decorate([ __metadata("design:paramtypes", [FileUploadService])
], FileSizeValidator);
export { FileSizeValidator };
/**
 * A Directive that adds the `fileslimit` validator to controls marked with the
 * `fileslimit` attribute.
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel fileslimit="2"></file-upload>
 * <file-upload name="files" ngModel [fileslimit]="2"></file-upload>
 * ```
 *
 */
let FilesLimitValidator = FilesLimitValidator_1 = class FilesLimitValidator {
    ngOnChanges(changes) {
        if ('fileslimit' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    }
    validate(c) {
        return this.fileslimit != null ? this.validator(c) : null;
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
    _createValidator() {
        this.validator = FileUploadValidators.filesLimit(typeof this.fileslimit === 'string' ? parseInt(this.fileslimit, 10) : this.fileslimit);
    }
};
FilesLimitValidator.ɵfac = function FilesLimitValidator_Factory(t) { return new (t || FilesLimitValidator)(); };
FilesLimitValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesLimitValidator, selectors: [["file-upload", "fileslimit", "", "formControlName", ""], ["file-upload", "fileslimit", "", "formControl", ""], ["file-upload", "fileslimit", "", "ngModel", ""]], hostVars: 1, hostBindings: function FilesLimitValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("fileslimit", ctx.fileslimit ? ctx.fileslimit : null);
    } }, inputs: { fileslimit: "fileslimit" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FilesLimitValidator_1),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", Object)
], FilesLimitValidator.prototype, "fileslimit", void 0);
export { FilesLimitValidator };
/**
 * A Directive that adds the `accept` validator to controls marked with the
 * `accept` attribute.
 *
 * ### Example
 *
 * ```
 * <file-upload name="files" ngModel accept="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
 * <file-upload name="files" ngModel [accept]="file_extension|audio/*|video/*|image/*|media_type"></file-upload>
 * ```
 *
 * To specify more than one value, separate the values with a comma (e.g. <file-upload accept="audio/*,video/*,image/*"></file-upload>.
 *
 */
let FilesAcceptValidator = FilesAcceptValidator_1 = class FilesAcceptValidator {
    ngOnChanges(changes) {
        if ('accept' in changes) {
            this._createValidator();
            if (this.onChange) {
                this.onChange();
            }
        }
    }
    validate(c) {
        return !!this.validator ? this.validator(c) : null;
    }
    registerOnValidatorChange(fn) {
        this.onChange = fn;
    }
    _createValidator() {
        if (IsNullOrEmpty(this.accept)) {
            return;
        }
        this.validator = FileUploadValidators.accept(this.accept.split(','));
    }
};
FilesAcceptValidator.ɵfac = function FilesAcceptValidator_Factory(t) { return new (t || FilesAcceptValidator)(); };
FilesAcceptValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesAcceptValidator, selectors: [["file-upload", "accept", "", "formControlName", ""], ["file-upload", "accept", "", "formControl", ""], ["file-upload", "accept", "", "ngModel", ""]], hostVars: 1, hostBindings: function FilesAcceptValidator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("accept", ctx.accept ? ctx.accept : null);
    } }, inputs: { accept: "accept" }, features: [ɵngcc0.ɵɵProvidersFeature([{
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FilesAcceptValidator_1),
                multi: true
            }]), ɵngcc0.ɵɵNgOnChangesFeature] });
__decorate([
    Input(),
    __metadata("design:type", String)
], FilesAcceptValidator.prototype, "accept", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FileSizeValidator, [{
        type: Directive,
        args: [{
                selector: `file-upload[filesize][formControlName],
    file-upload[filesize][formControl],
    file-upload[filesize][ngModel],
    file-upload[minsize][formControlName],
    file-upload[minsize][formControl],
    file-upload[minsize][ngModel],
    file-upload[maxsize][formControlName],
    file-upload[maxsize][formControl],
    file-upload[maxsize][ngModel]`,
                providers: [{
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => FileSizeValidator_1),
                        multi: true
                    }],
                host: {
                    '[attr.filesize]': 'filesize ? filesize : null',
                    '[attr.minsize]': 'minsize ? minsize : null',
                    '[attr.maxsize]': 'maxsize ? maxsize : null'
                }
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadService }]; }, { filesize: [{
            type: Input
        }], minsize: [{
            type: Input
        }], maxsize: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesLimitValidator, [{
        type: Directive,
        args: [{
                selector: 'file-upload[fileslimit][formControlName], file-upload[fileslimit][formControl], file-upload[fileslimit][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => FilesLimitValidator_1),
                        multi: true
                    }],
                host: { '[attr.fileslimit]': 'fileslimit ? fileslimit : null' }
            }]
    }], null, { fileslimit: [{
            type: Input
        }] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesAcceptValidator, [{
        type: Directive,
        args: [{
                selector: 'file-upload[accept][formControlName], file-upload[accept][formControl], file-upload[accept][ngModel]',
                providers: [{
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => FilesAcceptValidator_1),
                        multi: true
                    }],
                host: { '[attr.accept]': 'accept ? accept : null' }
            }]
    }], null, { accept: [{
            type: Input
        }] }); })();
export { FilesAcceptValidator };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,