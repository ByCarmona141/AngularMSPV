import { __decorate, __metadata, __param } from "tslib";
import { Directive, Input, Optional, Host, Self } from '@angular/core';
import { FileUploadComponent } from '../components/multiple-file-upload/file-upload.component';
import { SimpleFileUploadComponent } from '../components/simple-file-upload/simple-file-upload.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/multiple-file-upload/file-upload.component';
import * as ɵngcc2 from '../components/simple-file-upload/simple-file-upload.component';
let FilesAcceptDirective = class FilesAcceptDirective {
    constructor(fileUpload, simpleFileUpload) {
        this.fileUpload = null;
        this.fileUpload = fileUpload || simpleFileUpload;
    }
    ngAfterViewInit() {
        this.setAccept(this.accept);
    }
    ngOnChanges(changes) {
        if ('accept' in changes && changes['accept'].currentValue !== changes['accept'].previousValue) {
            this.setAccept(this.accept);
        }
    }
    setAccept(accept) {
        if (this.fileUpload && this.fileUpload.control) {
            this.fileUpload.control.acceptFiles(accept);
        }
    }
};
FilesAcceptDirective.ɵfac = function FilesAcceptDirective_Factory(t) { return new (t || FilesAcceptDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FileUploadComponent, 11), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.SimpleFileUploadComponent, 11)); };
FilesAcceptDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: FilesAcceptDirective, selectors: [["file-upload", "accept", ""]], hostVars: 1, hostBindings: function FilesAcceptDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("accept", ctx.accept ? ctx.accept : null);
    } }, inputs: { accept: "accept" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
FilesAcceptDirective.ctorParameters = () => [
    { type: FileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] },
    { type: SimpleFileUploadComponent, decorators: [{ type: Optional }, { type: Host }, { type: Self }] }
];
__decorate([
    Input(),
    __metadata("design:type", String)
], FilesAcceptDirective.prototype, "accept", void 0);
FilesAcceptDirective = __decorate([ __param(0, Optional()), __param(0, Host()), __param(0, Self()),
    __param(1, Optional()), __param(1, Host()), __param(1, Self()),
    __metadata("design:paramtypes", [FileUploadComponent,
        SimpleFileUploadComponent])
], FilesAcceptDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(FilesAcceptDirective, [{
        type: Directive,
        args: [{
                selector: 'file-upload[accept]',
                host: { '[attr.accept]': 'accept ? accept : null' }
            }]
    }], function () { return [{ type: ɵngcc1.FileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }, { type: ɵngcc2.SimpleFileUploadComponent, decorators: [{
                type: Optional
            }, {
                type: Host
            }, {
                type: Self
            }] }]; }, { accept: [{
            type: Input
        }] }); })();
export { FilesAcceptDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0cmlidXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsiQGlwbGFiL25neC1maWxlLXVwbG9hZC9saWIvZGlyZWN0aXZlcy9hdHRyaWJ1dGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBaUIsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQTRCLE1BQU0sZUFBZSxDQUFDO0FBQ2hILE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQy9GLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtEQUErRCxDQUFDOzs7O0FBUTFHLElBQWEsb0JBQW9CLEdBQWpDLE1BQWEsb0JBQW9CO0FBQUcsSUFPaEMsWUFDZ0MsVUFBK0IsRUFDL0IsZ0JBQTJDO0FBQy9FLFFBTHFCLGVBQVUsR0FBb0QsSUFBSSxDQUFDO0FBQ3hGLFFBSVEsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLElBQUksZ0JBQWdCLENBQUM7QUFDekQsSUFBSSxDQUFDO0FBQ0wsSUFDVyxlQUFlO0FBQUssUUFDdkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDcEMsSUFBSSxDQUFDO0FBQ0wsSUFDVyxXQUFXLENBQUMsT0FBc0I7QUFBSSxRQUN6QyxJQUFJLFFBQVEsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsYUFBYSxFQUFFO0FBQ3ZHLFlBQVksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLElBQ1ksU0FBUyxDQUFDLE1BQWM7QUFBSSxRQUNoQyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUU7QUFDeEQsWUFBWSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEQsU0FBUztBQUNULElBQUksQ0FBQztBQUNMLENBQUM7Ozs7a0ZBQUE7QUFDRDtBQUE4QyxZQXJCRSxtQkFBbUIsdUJBQTFELFFBQVEsWUFBSSxJQUFJLFlBQUksSUFBSTtBQUFPLFlBQ2MseUJBQXlCLHVCQUF0RSxRQUFRLFlBQUksSUFBSSxZQUFJLElBQUk7QUFBTTtBQU5uQztBQUFhLElBRFosS0FBSyxFQUFFO0FBQ1g7QUFFVSxvREFGZTtBQUhiLG9CQUFvQixvQkFKaEMsU0FBUyxDQUFDLFVBQ1AsUUFBUSxFQUFFLHFCQUFxQix4REFHL0IsQ0FRSyxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLFdBQUEsSUFBSSxFQUFFLENBQUE7Q0FWL0IsSUFBSSxFQUFFLEVBQUMsZUFBZSxFQUFFLHdCQUF3QixFQUFDLE1BQ3BELENBQUMsM0RBU21DLElBQzVCLFdBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxXQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsV0FBQSxJQUFJLEVBQUUsQ0FBQTtBQUFFLHFDQURXLG1CQUFtQjtBQUNuRSxRQUFzRCx5QkFBeUI7QUFBRyxHQVRyRSxvQkFBb0IsQ0E0QmhDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ0Q7O0FBdkNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUtBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFOQSxBQURBLEFBQUEsQUFBQSxBQUNBLEFBSEEsQUFBQSxBQUpBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFTQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBQ0EsQUFBQSxBQVRBLEFBQUEsQUE0QkEsQUE1QkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9wdGlvbmFsLCBIb3N0LCBTZWxmLCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbXVsdGlwbGUtZmlsZS11cGxvYWQvZmlsZS11cGxvYWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvc2ltcGxlLWZpbGUtdXBsb2FkL3NpbXBsZS1maWxlLXVwbG9hZC5jb21wb25lbnQnO1xyXG5cclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnZmlsZS11cGxvYWRbYWNjZXB0XScsXHJcbiAgICBob3N0OiB7J1thdHRyLmFjY2VwdF0nOiAnYWNjZXB0ID8gYWNjZXB0IDogbnVsbCd9XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWxlc0FjY2VwdERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gICAgQElucHV0KClcclxuICAgIHB1YmxpYyBhY2NlcHQ6IHN0cmluZztcclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGZpbGVVcGxvYWQ6IEZpbGVVcGxvYWRDb21wb25lbnQgfCBTaW1wbGVGaWxlVXBsb2FkQ29tcG9uZW50ID0gbnVsbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBAT3B0aW9uYWwoKSBASG9zdCgpIEBTZWxmKCkgZmlsZVVwbG9hZDogRmlsZVVwbG9hZENvbXBvbmVudCxcclxuICAgICAgICBAT3B0aW9uYWwoKSBASG9zdCgpIEBTZWxmKCkgc2ltcGxlRmlsZVVwbG9hZDogU2ltcGxlRmlsZVVwbG9hZENvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuZmlsZVVwbG9hZCA9IGZpbGVVcGxvYWQgfHwgc2ltcGxlRmlsZVVwbG9hZDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc2V0QWNjZXB0KHRoaXMuYWNjZXB0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgICAgIGlmICgnYWNjZXB0JyBpbiBjaGFuZ2VzICYmIGNoYW5nZXNbJ2FjY2VwdCddLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlc1snYWNjZXB0J10ucHJldmlvdXNWYWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldEFjY2VwdCh0aGlzLmFjY2VwdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0QWNjZXB0KGFjY2VwdDogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmlsZVVwbG9hZCAmJiB0aGlzLmZpbGVVcGxvYWQuY29udHJvbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbGVVcGxvYWQuY29udHJvbC5hY2NlcHRGaWxlcyhhY2NlcHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=