/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { TinymceComponent } from './angular2-tinymce-lib.component';
import { TinymceDefaultOptions } from './angular2-tinymce-lib.default';
import * as ɵngcc0 from '@angular/core';
var TinymceModule = /** @class */ (function () {
    function TinymceModule() {
    }
    /**
     * @param {?=} userConfig
     * @return {?}
     */
    TinymceModule.withConfig = /**
     * @param {?=} userConfig
     * @return {?}
     */
    function (userConfig) {
        if (userConfig === void 0) { userConfig = {}; }
        return {
            ngModule: TinymceModule,
            providers: [
                { provide: 'TINYMCE_CONFIG', useValue: userConfig }
            ]
        };
    };
TinymceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TinymceModule });
TinymceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TinymceModule_Factory(t) { return new (t || TinymceModule)(); }, providers: [
        { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
    ], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TinymceModule, { declarations: function () { return [TinymceComponent]; }, exports: function () { return [TinymceComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TinymceModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [TinymceComponent],
                exports: [TinymceComponent],
                providers: [
                    { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
                ]
            }]
    }], function () { return []; }, null); })();
    return TinymceModule;
}());
export { TinymceModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjItdGlueW1jZS1saWIubW9kdWxlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyMi10aW55bWNlL2xpYi9hbmd1bGFyMi10aW55bWNlLWxpYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQUN2RTtBQUdzQjtBQUNKO0FBQU07QUFDdEI7QUFDZ0I7QUFBbUI7QUFBUSxJQUlyQyx3QkFBVTtBQUFPO0FBQThCO0FBQW1CO0FBQ25FLElBRE4sVUFBa0IsVUFBK0I7QUFBSSxRQUFuQywyQkFBQSxFQUFBLGVBQStCO0FBQUksUUFDcEQsT0FBTztBQUNULFlBQUcsUUFBUSxFQUFFLGFBQWE7QUFDMUIsWUFBRyxTQUFTLEVBQUU7QUFDZCxnQkFBSSxFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFO0FBQ3ZELGFBQUk7QUFDSixTQUFHLENBQUM7QUFDSixLQUFFO2lEQWhCRCxRQUFRLFNBQUM7aUJBQ1QsT0FBTyxFQUFFLEVBQUUsc0JBQ1gsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsc0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO1VBQzNCLFNBQVMsRUFBRSwwQkFDVixFQUFFLE9BQU8sRUFBRTtHQUFnQixFQUFFLFFBQVEsRUFBRTtXQUFxQixFQUFFLHNCQUM5RCxrQkFDRDs7Ozs7Ozs7Ozs7Z0RBQ1E7QUFBQyx3QkFiVjtBQUFFO0FBQU0sU0FhSyxhQUFhOztBQWJBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQ0EsQUFoQkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFaQSxBQWFBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGlueW1jZUNvbXBvbmVudCB9IGZyb20gJy4vYW5ndWxhcjItdGlueW1jZS1saWIuY29tcG9uZW50JztcbmltcG9ydCB7IFRpbnltY2VPcHRpb25zIH0gZnJvbSAnLi9hbmd1bGFyMi10aW55bWNlLWxpYi5jb25maWcuaW50ZXJmYWNlJztcbmltcG9ydCB7IFRpbnltY2VEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4vYW5ndWxhcjItdGlueW1jZS1saWIuZGVmYXVsdCc7XG5cbkBOZ01vZHVsZSh7XG5cdGltcG9ydHM6IFtdLFxuXHRkZWNsYXJhdGlvbnM6IFtUaW55bWNlQ29tcG9uZW50XSxcblx0ZXhwb3J0czogW1RpbnltY2VDb21wb25lbnRdLFxuXHRwcm92aWRlcnM6IFtcblx0XHR7IHByb3ZpZGU6ICdUSU5ZTUNFX0NPTkZJRycsIHVzZUNsYXNzOiBUaW55bWNlRGVmYXVsdE9wdGlvbnMgfVxuXHRdXG59KVxuZXhwb3J0IGNsYXNzIFRpbnltY2VNb2R1bGUge1xuXHRzdGF0aWMgd2l0aENvbmZpZyh1c2VyQ29uZmlnOiBUaW55bWNlT3B0aW9ucyA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5nTW9kdWxlOiBUaW55bWNlTW9kdWxlLFxuXHRcdFx0cHJvdmlkZXJzOiBbXG5cdFx0XHRcdHsgcHJvdmlkZTogJ1RJTllNQ0VfQ09ORklHJywgdXNlVmFsdWU6IHVzZXJDb25maWcgfVxuXHRcdFx0XVxuXHRcdH07XG5cdH1cbn1cbiJdfQ==