/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, forwardRef, NgZone, Inject, Input, EventEmitter, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { TinymceDefaultOptions } from './angular2-tinymce-lib.default';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
/** @type {?} */
import * as ɵngcc0 from '@angular/core';
const noop = () => {
};
const ɵ0 = noop;
export class TinymceComponent {
    /**
     * @param {?} zone
     * @param {?} globalOptions
     */
    constructor(zone, globalOptions) {
        this.zone = zone;
        this.globalOptions = globalOptions;
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.keydown = new EventEmitter();
        this.keypress = new EventEmitter();
        this.keyup = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.paste = new EventEmitter();
        this.init = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.beforeSetContent = new EventEmitter();
        this.setContent = new EventEmitter();
        this.getContent = new EventEmitter();
        this.preProcess = new EventEmitter();
        this.postProcess = new EventEmitter();
        this.nodeChange = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.change = new EventEmitter();
        this.dirty = new EventEmitter();
        this.remove = new EventEmitter();
        this.execCommand = new EventEmitter();
        this.pastePreProcess = new EventEmitter();
        this.pastePostProcess = new EventEmitter();
        this.elementId = 'tiny-' + Math.random().toString(36).substring(2);
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);
        this.options.selector = '#' + this.elementId;
        this.options.setup = editor => {
            this.setupEvents(editor);
        };
        this.options.init_instance_callback = editor => {
            if (editor && this.value) {
                editor.setContent(this.value);
            }
            this.editor = editor;
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.options.baseURL) {
            tinymce.baseURL = this.options.baseURL;
        }
        tinymce.init(this.options);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        tinymce.remove(this.editor);
    }
    /**
     * @return {?}
     */
    get value() {
        return this.innerValue;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.innerValue) {
            this.innerValue = v;
            this.zone.run(() => {
                this.onChangeCallback(v);
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            if (!value) {
                value = '';
            }
            if (this.editor && this.editor.initialized) {
                this.editor.setContent(value);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} editor
     * @return {?}
     */
    setupEvents(editor) {
        editor.on('change keyup', () => {
            /** @type {?} */
            const content = editor.getContent();
            this.value = content;
        });
        editor.on('click', e => {
            this.click.emit(e);
        });
        editor.on('dblclick', e => {
            this.dblclick.emit(e);
        });
        editor.on('mousedown', e => {
            this.mousedown.emit(e);
        });
        editor.on('mouseup', e => {
            this.mouseup.emit(e);
        });
        editor.on('mousemove', e => {
            this.mousemove.emit(e);
        });
        editor.on('mouseover', e => {
            this.mouseover.emit(e);
        });
        editor.on('mouseout', e => {
            this.mouseout.emit(e);
        });
        editor.on('mouseenter', e => {
            this.mouseenter.emit(e);
        });
        editor.on('mouseleave', e => {
            this.mouseleave.emit(e);
        });
        editor.on('keydown', e => {
            this.keydown.emit(e);
        });
        editor.on('keypress', e => {
            this.keypress.emit(e);
        });
        editor.on('keyup', e => {
            this.keyup.emit(e);
        });
        editor.on('contextmenu', e => {
            this.contextmenu.emit(e);
        });
        editor.on('paste', e => {
            this.paste.emit(e);
        });
        editor.on('init', e => {
            this.init.emit(e);
        });
        editor.on('focus', e => {
            this.focus.emit(e);
        });
        editor.on('blur', e => {
            this.blur.emit(e);
        });
        editor.on('BeforeSetContent', e => {
            this.beforeSetContent.emit(e);
        });
        editor.on('SetContent', e => {
            this.setContent.emit(e);
        });
        editor.on('GetContent', e => {
            this.getContent.emit(e);
        });
        editor.on('PreProcess', e => {
            this.preProcess.emit(e);
        });
        editor.on('PostProcess', e => {
            this.postProcess.emit(e);
        });
        editor.on('NodeChange', e => {
            this.nodeChange.emit(e);
        });
        editor.on('Undo', e => {
            this.undo.emit(e);
        });
        editor.on('Redo', e => {
            this.redo.emit(e);
        });
        editor.on('Change', e => {
            this.change.emit(e);
        });
        editor.on('Dirty', e => {
            this.dirty.emit(e);
        });
        editor.on('Remove', e => {
            this.remove.emit(e);
        });
        editor.on('ExecCommand', e => {
            this.execCommand.emit(e);
        });
        editor.on('PastePreProcess', e => {
            this.pastePreProcess.emit(e);
        });
        editor.on('PastePostProcess', e => {
            this.pastePostProcess.emit(e);
        });
    }
}
TinymceComponent.ɵfac = function TinymceComponent_Factory(t) { return new (t || TinymceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject('TINYMCE_CONFIG')); };
TinymceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TinymceComponent, selectors: [["app-tinymce"]], inputs: { optionsOverride: ["options", "optionsOverride"] }, outputs: { click: "click", dblclick: "dblclick", mousedown: "mousedown", mouseup: "mouseup", mousemove: "mousemove", mouseover: "mouseover", mouseout: "mouseout", mouseenter: "mouseenter", mouseleave: "mouseleave", keydown: "keydown", keypress: "keypress", keyup: "keyup", contextmenu: "contextmenu", paste: "paste", init: "init", focus: "focus", blur: "blur", beforeSetContent: "beforeSetContent", setContent: "setContent", getContent: "getContent", preProcess: "preProcess", postProcess: "postProcess", nodeChange: "nodeChange", undo: "undo", redo: "redo", change: "change", dirty: "dirty", remove: "remove", execCommand: "execCommand", pastePreProcess: "pastePreProcess", pastePostProcess: "pastePostProcess" }, exportAs: ["tinymce"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => TinymceComponent),
                multi: true
            }
        ])], decls: 1, vars: 1, consts: [[3, "id"]], template: function TinymceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.elementId);
    } }, encapsulation: 2 });
/** @nocollapse */
TinymceComponent.ctorParameters = () => [
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: ['TINYMCE_CONFIG',] }] }
];
TinymceComponent.propDecorators = {
    optionsOverride: [{ type: Input, args: ['options',] }],
    click: [{ type: Output }],
    dblclick: [{ type: Output }],
    mousedown: [{ type: Output }],
    mouseup: [{ type: Output }],
    mousemove: [{ type: Output }],
    mouseover: [{ type: Output }],
    mouseout: [{ type: Output }],
    mouseenter: [{ type: Output }],
    mouseleave: [{ type: Output }],
    keydown: [{ type: Output }],
    keypress: [{ type: Output }],
    keyup: [{ type: Output }],
    contextmenu: [{ type: Output }],
    paste: [{ type: Output }],
    init: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    beforeSetContent: [{ type: Output }],
    setContent: [{ type: Output }],
    getContent: [{ type: Output }],
    preProcess: [{ type: Output }],
    postProcess: [{ type: Output }],
    nodeChange: [{ type: Output }],
    undo: [{ type: Output }],
    redo: [{ type: Output }],
    change: [{ type: Output }],
    dirty: [{ type: Output }],
    remove: [{ type: Output }],
    execCommand: [{ type: Output }],
    pastePreProcess: [{ type: Output }],
    pastePostProcess: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TinymceComponent, [{
        type: Component,
        args: [{
                selector: 'app-tinymce',
                template: '<div id="{{elementId}}"></div>',
                exportAs: 'tinymce',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => TinymceComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: Inject,
                args: ['TINYMCE_CONFIG']
            }] }]; }, { click: [{
            type: Output
        }], dblclick: [{
            type: Output
        }], mousedown: [{
            type: Output
        }], mouseup: [{
            type: Output
        }], mousemove: [{
            type: Output
        }], mouseover: [{
            type: Output
        }], mouseout: [{
            type: Output
        }], mouseenter: [{
            type: Output
        }], mouseleave: [{
            type: Output
        }], keydown: [{
            type: Output
        }], keypress: [{
            type: Output
        }], keyup: [{
            type: Output
        }], contextmenu: [{
            type: Output
        }], paste: [{
            type: Output
        }], init: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], beforeSetContent: [{
            type: Output
        }], setContent: [{
            type: Output
        }], getContent: [{
            type: Output
        }], preProcess: [{
            type: Output
        }], postProcess: [{
            type: Output
        }], nodeChange: [{
            type: Output
        }], undo: [{
            type: Output
        }], redo: [{
            type: Output
        }], change: [{
            type: Output
        }], dirty: [{
            type: Output
        }], remove: [{
            type: Output
        }], execCommand: [{
            type: Output
        }], pastePreProcess: [{
            type: Output
        }], pastePostProcess: [{
            type: Output
        }], optionsOverride: [{
            type: Input,
            args: ['options']
        }] }); })();
if (false) {
    /** @type {?} */
    TinymceComponent.prototype.optionsOverride;
    /** @type {?} */
    TinymceComponent.prototype.click;
    /** @type {?} */
    TinymceComponent.prototype.dblclick;
    /** @type {?} */
    TinymceComponent.prototype.mousedown;
    /** @type {?} */
    TinymceComponent.prototype.mouseup;
    /** @type {?} */
    TinymceComponent.prototype.mousemove;
    /** @type {?} */
    TinymceComponent.prototype.mouseover;
    /** @type {?} */
    TinymceComponent.prototype.mouseout;
    /** @type {?} */
    TinymceComponent.prototype.mouseenter;
    /** @type {?} */
    TinymceComponent.prototype.mouseleave;
    /** @type {?} */
    TinymceComponent.prototype.keydown;
    /** @type {?} */
    TinymceComponent.prototype.keypress;
    /** @type {?} */
    TinymceComponent.prototype.keyup;
    /** @type {?} */
    TinymceComponent.prototype.contextmenu;
    /** @type {?} */
    TinymceComponent.prototype.paste;
    /** @type {?} */
    TinymceComponent.prototype.init;
    /** @type {?} */
    TinymceComponent.prototype.focus;
    /** @type {?} */
    TinymceComponent.prototype.blur;
    /** @type {?} */
    TinymceComponent.prototype.beforeSetContent;
    /** @type {?} */
    TinymceComponent.prototype.setContent;
    /** @type {?} */
    TinymceComponent.prototype.getContent;
    /** @type {?} */
    TinymceComponent.prototype.preProcess;
    /** @type {?} */
    TinymceComponent.prototype.postProcess;
    /** @type {?} */
    TinymceComponent.prototype.nodeChange;
    /** @type {?} */
    TinymceComponent.prototype.undo;
    /** @type {?} */
    TinymceComponent.prototype.redo;
    /** @type {?} */
    TinymceComponent.prototype.change;
    /** @type {?} */
    TinymceComponent.prototype.dirty;
    /** @type {?} */
    TinymceComponent.prototype.remove;
    /** @type {?} */
    TinymceComponent.prototype.execCommand;
    /** @type {?} */
    TinymceComponent.prototype.pastePreProcess;
    /** @type {?} */
    TinymceComponent.prototype.pastePostProcess;
    /** @type {?} */
    TinymceComponent.prototype.elementId;
    /** @type {?} */
    TinymceComponent.prototype.editor;
    /** @type {?} */
    TinymceComponent.prototype.onTouchedCallback;
    /** @type {?} */
    TinymceComponent.prototype.onChangeCallback;
    /** @type {?} */
    TinymceComponent.prototype.innerValue;
    /** @type {?} */
    TinymceComponent.prototype.options;
    /** @type {?} */
    TinymceComponent.prototype.zone;
    /** @type {?} */
    TinymceComponent.prototype.globalOptions;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,