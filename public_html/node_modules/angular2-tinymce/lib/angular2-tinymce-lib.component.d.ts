import { OnDestroy, AfterViewInit, NgZone, OnInit, EventEmitter } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TinymceOptions } from './angular2-tinymce-lib.config.interface';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';
import * as ɵngcc0 from '@angular/core';
export declare class TinymceComponent implements ControlValueAccessor, AfterViewInit, OnInit, OnDestroy {
    private zone;
    private globalOptions;
    optionsOverride: TinymceOptions;
    click: EventEmitter<{}>;
    dblclick: EventEmitter<{}>;
    mousedown: EventEmitter<{}>;
    mouseup: EventEmitter<{}>;
    mousemove: EventEmitter<{}>;
    mouseover: EventEmitter<{}>;
    mouseout: EventEmitter<{}>;
    mouseenter: EventEmitter<{}>;
    mouseleave: EventEmitter<{}>;
    keydown: EventEmitter<{}>;
    keypress: EventEmitter<{}>;
    keyup: EventEmitter<{}>;
    contextmenu: EventEmitter<{}>;
    paste: EventEmitter<{}>;
    init: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    blur: EventEmitter<{}>;
    beforeSetContent: EventEmitter<{}>;
    setContent: EventEmitter<{}>;
    getContent: EventEmitter<{}>;
    preProcess: EventEmitter<{}>;
    postProcess: EventEmitter<{}>;
    nodeChange: EventEmitter<{}>;
    undo: EventEmitter<{}>;
    redo: EventEmitter<{}>;
    change: EventEmitter<{}>;
    dirty: EventEmitter<{}>;
    remove: EventEmitter<{}>;
    execCommand: EventEmitter<{}>;
    pastePreProcess: EventEmitter<{}>;
    pastePostProcess: EventEmitter<{}>;
    elementId: string;
    editor: any;
    private onTouchedCallback;
    private onChangeCallback;
    private innerValue;
    private options;
    constructor(zone: NgZone, globalOptions: TinymceOptions);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    value: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setupEvents(editor: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TinymceComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TinymceComponent, "app-tinymce", ["tinymce"], { "optionsOverride": "options"; }, { "click": "click"; "dblclick": "dblclick"; "mousedown": "mousedown"; "mouseup": "mouseup"; "mousemove": "mousemove"; "mouseover": "mouseover"; "mouseout": "mouseout"; "mouseenter": "mouseenter"; "mouseleave": "mouseleave"; "keydown": "keydown"; "keypress": "keypress"; "keyup": "keyup"; "contextmenu": "contextmenu"; "paste": "paste"; "init": "init"; "focus": "focus"; "blur": "blur"; "beforeSetContent": "beforeSetContent"; "setContent": "setContent"; "getContent": "getContent"; "preProcess": "preProcess"; "postProcess": "postProcess"; "nodeChange": "nodeChange"; "undo": "undo"; "redo": "redo"; "change": "change"; "dirty": "dirty"; "remove": "remove"; "execCommand": "execCommand"; "pastePreProcess": "pastePreProcess"; "pastePostProcess": "pastePostProcess"; }, never, never>;
}

//# sourceMappingURL=angular2-tinymce-lib.component.d.ts.map