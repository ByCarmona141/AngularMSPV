import { Injectable, NgModule, Component, forwardRef, NgZone, Inject, Input, EventEmitter, Output, defineInjectable } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import 'tinymce/tinymce.min';
import 'tinymce/themes/modern/theme';
import 'tinymce/plugins/link/plugin.js';
import 'tinymce/plugins/paste/plugin.js';
import 'tinymce/plugins/table/plugin.js';
import 'tinymce/plugins/advlist/plugin.js';
import 'tinymce/plugins/autoresize/plugin.js';
import 'tinymce/plugins/lists/plugin.js';
import 'tinymce/plugins/code/plugin.js';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
var Angular2TinymceLibService = /** @class */ (function () {
    function Angular2TinymceLibService() {
    }
    /** @nocollapse */
    Angular2TinymceLibService.ctorParameters = function () { return []; };
    /** @nocollapse */ Angular2TinymceLibService.ngInjectableDef = defineInjectable({ factory: function Angular2TinymceLibService_Factory() { return new Angular2TinymceLibService(); }, token: Angular2TinymceLibService, providedIn: "root" });
Angular2TinymceLibService.ɵfac = function Angular2TinymceLibService_Factory(t) { return new (t || Angular2TinymceLibService)(); };
Angular2TinymceLibService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Angular2TinymceLibService, factory: function (t) { return Angular2TinymceLibService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angular2TinymceLibService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return Angular2TinymceLibService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TinymceDefaultOptions = /** @class */ (function () {
    function TinymceDefaultOptions() {
        this.plugins = [
            'link',
            'paste',
            'table',
            'advlist',
            'autoresize',
            'lists',
            'code'
        ];
        this.skin_url = '/assets/tinymce/skins/lightgray';
        this.baseURL = '/assets/tinymce';
        this.auto_focus = true;
    }
TinymceDefaultOptions.ɵfac = function TinymceDefaultOptions_Factory(t) { return new (t || TinymceDefaultOptions)(); };
TinymceDefaultOptions.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TinymceDefaultOptions, factory: function (t) { return TinymceDefaultOptions.ɵfac(t); } });

    return TinymceDefaultOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var noop = function () {
};
var TinymceComponent = /** @class */ (function () {
    function TinymceComponent(zone, globalOptions) {
        this.zone = zone;
        this.globalOptions = globalOptions;
        this.click = new EventEmitter();
        this.dblclick = new EventEmitter();
        this.mousedown = new EventEmitter();
        this.mouseup = new EventEmitter();
        this.mousemove = new EventEmitter();
        this.mouseover = new EventEmitter();
        this.mouseout = new EventEmitter();
        this.mouseenter = new EventEmitter();
        this.mouseleave = new EventEmitter();
        this.keydown = new EventEmitter();
        this.keypress = new EventEmitter();
        this.keyup = new EventEmitter();
        this.contextmenu = new EventEmitter();
        this.paste = new EventEmitter();
        this.init = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.beforeSetContent = new EventEmitter();
        this.setContent = new EventEmitter();
        this.getContent = new EventEmitter();
        this.preProcess = new EventEmitter();
        this.postProcess = new EventEmitter();
        this.nodeChange = new EventEmitter();
        this.undo = new EventEmitter();
        this.redo = new EventEmitter();
        this.change = new EventEmitter();
        this.dirty = new EventEmitter();
        this.remove = new EventEmitter();
        this.execCommand = new EventEmitter();
        this.pastePreProcess = new EventEmitter();
        this.pastePostProcess = new EventEmitter();
        this.elementId = 'tiny-' + Math.random().toString(36).substring(2);
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
    }
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.options = Object.assign(new TinymceDefaultOptions(), this.globalOptions, this.optionsOverride);
        this.options.selector = '#' + this.elementId;
        this.options.setup = function (editor) {
            _this.setupEvents(editor);
        };
        this.options.init_instance_callback = function (editor) {
            if (editor && _this.value) {
                editor.setContent(_this.value);
            }
            _this.editor = editor;
        };
    };
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.options.baseURL) {
            tinymce.baseURL = this.options.baseURL;
        }
        tinymce.init(this.options);
    };
    /**
     * @return {?}
     */
    TinymceComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        tinymce.remove(this.editor);
    };
    Object.defineProperty(TinymceComponent.prototype, "value", {
        // get accessor
        get: /**
         * @return {?}
         */
        function () {
            return this.innerValue;
        },
        // set accessor including call the onchange callback
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            if (v !== this.innerValue) {
                this.innerValue = v;
                this.zone.run(function () {
                    _this.onChangeCallback(v);
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    // From ControlValueAccessor interface
    /**
     * @param {?} value
     * @return {?}
     */
    TinymceComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value !== this.innerValue) {
            this.innerValue = value;
            if (!value) {
                value = '';
            }
            if (this.editor && this.editor.initialized) {
                this.editor.setContent(value);
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinymceComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    TinymceComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} editor
     * @return {?}
     */
    TinymceComponent.prototype.setupEvents = /**
     * @param {?} editor
     * @return {?}
     */
    function (editor) {
        var _this = this;
        editor.on('change keyup', function () {
            /** @type {?} */
            var content = editor.getContent();
            _this.value = content;
        });
        editor.on('click', function (e) {
            _this.click.emit(e);
        });
        editor.on('dblclick', function (e) {
            _this.dblclick.emit(e);
        });
        editor.on('mousedown', function (e) {
            _this.mousedown.emit(e);
        });
        editor.on('mouseup', function (e) {
            _this.mouseup.emit(e);
        });
        editor.on('mousemove', function (e) {
            _this.mousemove.emit(e);
        });
        editor.on('mouseover', function (e) {
            _this.mouseover.emit(e);
        });
        editor.on('mouseout', function (e) {
            _this.mouseout.emit(e);
        });
        editor.on('mouseenter', function (e) {
            _this.mouseenter.emit(e);
        });
        editor.on('mouseleave', function (e) {
            _this.mouseleave.emit(e);
        });
        editor.on('keydown', function (e) {
            _this.keydown.emit(e);
        });
        editor.on('keypress', function (e) {
            _this.keypress.emit(e);
        });
        editor.on('keyup', function (e) {
            _this.keyup.emit(e);
        });
        editor.on('contextmenu', function (e) {
            _this.contextmenu.emit(e);
        });
        editor.on('paste', function (e) {
            _this.paste.emit(e);
        });
        editor.on('init', function (e) {
            _this.init.emit(e);
        });
        editor.on('focus', function (e) {
            _this.focus.emit(e);
        });
        editor.on('blur', function (e) {
            _this.blur.emit(e);
        });
        editor.on('BeforeSetContent', function (e) {
            _this.beforeSetContent.emit(e);
        });
        editor.on('SetContent', function (e) {
            _this.setContent.emit(e);
        });
        editor.on('GetContent', function (e) {
            _this.getContent.emit(e);
        });
        editor.on('PreProcess', function (e) {
            _this.preProcess.emit(e);
        });
        editor.on('PostProcess', function (e) {
            _this.postProcess.emit(e);
        });
        editor.on('NodeChange', function (e) {
            _this.nodeChange.emit(e);
        });
        editor.on('Undo', function (e) {
            _this.undo.emit(e);
        });
        editor.on('Redo', function (e) {
            _this.redo.emit(e);
        });
        editor.on('Change', function (e) {
            _this.change.emit(e);
        });
        editor.on('Dirty', function (e) {
            _this.dirty.emit(e);
        });
        editor.on('Remove', function (e) {
            _this.remove.emit(e);
        });
        editor.on('ExecCommand', function (e) {
            _this.execCommand.emit(e);
        });
        editor.on('PastePreProcess', function (e) {
            _this.pastePreProcess.emit(e);
        });
        editor.on('PastePostProcess', function (e) {
            _this.pastePostProcess.emit(e);
        });
    };
    /** @nocollapse */
    TinymceComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: undefined, decorators: [{ type: Inject, args: ['TINYMCE_CONFIG',] }] }
    ]; };
    TinymceComponent.propDecorators = {
        optionsOverride: [{ type: Input, args: ['options',] }],
        click: [{ type: Output }],
        dblclick: [{ type: Output }],
        mousedown: [{ type: Output }],
        mouseup: [{ type: Output }],
        mousemove: [{ type: Output }],
        mouseover: [{ type: Output }],
        mouseout: [{ type: Output }],
        mouseenter: [{ type: Output }],
        mouseleave: [{ type: Output }],
        keydown: [{ type: Output }],
        keypress: [{ type: Output }],
        keyup: [{ type: Output }],
        contextmenu: [{ type: Output }],
        paste: [{ type: Output }],
        init: [{ type: Output }],
        focus: [{ type: Output }],
        blur: [{ type: Output }],
        beforeSetContent: [{ type: Output }],
        setContent: [{ type: Output }],
        getContent: [{ type: Output }],
        preProcess: [{ type: Output }],
        postProcess: [{ type: Output }],
        nodeChange: [{ type: Output }],
        undo: [{ type: Output }],
        redo: [{ type: Output }],
        change: [{ type: Output }],
        dirty: [{ type: Output }],
        remove: [{ type: Output }],
        execCommand: [{ type: Output }],
        pastePreProcess: [{ type: Output }],
        pastePostProcess: [{ type: Output }]
    };
TinymceComponent.ɵfac = function TinymceComponent_Factory(t) { return new (t || TinymceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject('TINYMCE_CONFIG')); };
TinymceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TinymceComponent, selectors: [["app-tinymce"]], inputs: { optionsOverride: ["options", "optionsOverride"] }, outputs: { click: "click", dblclick: "dblclick", mousedown: "mousedown", mouseup: "mouseup", mousemove: "mousemove", mouseover: "mouseover", mouseout: "mouseout", mouseenter: "mouseenter", mouseleave: "mouseleave", keydown: "keydown", keypress: "keypress", keyup: "keyup", contextmenu: "contextmenu", paste: "paste", init: "init", focus: "focus", blur: "blur", beforeSetContent: "beforeSetContent", setContent: "setContent", getContent: "getContent", preProcess: "preProcess", postProcess: "postProcess", nodeChange: "nodeChange", undo: "undo", redo: "redo", change: "change", dirty: "dirty", remove: "remove", execCommand: "execCommand", pastePreProcess: "pastePreProcess", pastePostProcess: "pastePostProcess" }, exportAs: ["tinymce"], features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(function () { return TinymceComponent; }),
                multi: true
            }
        ])], decls: 1, vars: 1, consts: [[3, "id"]], template: function TinymceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵpropertyInterpolate("id", ctx.elementId);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TinymceComponent, [{
        type: Component,
        args: [{
                selector: 'app-tinymce',
                template: '<div id="{{elementId}}"></div>',
                exportAs: 'tinymce',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(function () { return TinymceComponent; }),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: Inject,
                args: ['TINYMCE_CONFIG']
            }] }]; }, { click: [{
            type: Output
        }], dblclick: [{
            type: Output
        }], mousedown: [{
            type: Output
        }], mouseup: [{
            type: Output
        }], mousemove: [{
            type: Output
        }], mouseover: [{
            type: Output
        }], mouseout: [{
            type: Output
        }], mouseenter: [{
            type: Output
        }], mouseleave: [{
            type: Output
        }], keydown: [{
            type: Output
        }], keypress: [{
            type: Output
        }], keyup: [{
            type: Output
        }], contextmenu: [{
            type: Output
        }], paste: [{
            type: Output
        }], init: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], beforeSetContent: [{
            type: Output
        }], setContent: [{
            type: Output
        }], getContent: [{
            type: Output
        }], preProcess: [{
            type: Output
        }], postProcess: [{
            type: Output
        }], nodeChange: [{
            type: Output
        }], undo: [{
            type: Output
        }], redo: [{
            type: Output
        }], change: [{
            type: Output
        }], dirty: [{
            type: Output
        }], remove: [{
            type: Output
        }], execCommand: [{
            type: Output
        }], pastePreProcess: [{
            type: Output
        }], pastePostProcess: [{
            type: Output
        }], optionsOverride: [{
            type: Input,
            args: ['options']
        }] }); })();
    return TinymceComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TinymceModule = /** @class */ (function () {
    function TinymceModule() {
    }
    /**
     * @param {?=} userConfig
     * @return {?}
     */
    TinymceModule.withConfig = /**
     * @param {?=} userConfig
     * @return {?}
     */
    function (userConfig) {
        if (userConfig === void 0) { userConfig = {}; }
        return {
            ngModule: TinymceModule,
            providers: [
                { provide: 'TINYMCE_CONFIG', useValue: userConfig }
            ]
        };
    };
TinymceModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TinymceModule });
TinymceModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TinymceModule_Factory(t) { return new (t || TinymceModule)(); }, providers: [
        { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
    ], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TinymceModule, { declarations: [TinymceComponent], exports: [TinymceComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TinymceModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [TinymceComponent],
                exports: [TinymceComponent],
                providers: [
                    { provide: 'TINYMCE_CONFIG', useClass: TinymceDefaultOptions }
                ]
            }]
    }], function () { return []; }, null); })();
    return TinymceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { Angular2TinymceLibService, TinymceComponent, TinymceModule, TinymceDefaultOptions as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,