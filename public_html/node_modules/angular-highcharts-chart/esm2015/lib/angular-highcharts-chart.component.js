/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export class AngularHighchartsChartComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.updateValue = false;
        this.updateChange = new EventEmitter(true);
        this.updateOrCreateChart = function () {
            if (this.chart && this.chart.update) {
                this.chart.update(this.optionsValue, true, this.oneToOne || false);
            }
            else {
                this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                this.optionsValue.series = this.chart.userOptions.series;
            }
        };
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set options(val) {
        this.optionsValue = val;
        this.updateOrCreateChart();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set update(val) {
        if (val) {
            this.updateOrCreateChart();
            this.updateChange.emit(false); // clear the flag after update
        }
    }
}
AngularHighchartsChartComponent.ɵfac = function AngularHighchartsChartComponent_Factory(t) { return new (t || AngularHighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AngularHighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularHighchartsChartComponent, selectors: [["lib-highcharts-angular"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne" }, outputs: { updateChange: "updateChange" }, decls: 0, vars: 0, template: function AngularHighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/** @nocollapse */
AngularHighchartsChartComponent.ctorParameters = () => [
    { type: ElementRef }
];
AngularHighchartsChartComponent.propDecorators = {
    Highcharts: [{ type: Input }],
    constructorType: [{ type: Input }],
    callbackFunction: [{ type: Input }],
    options: [{ type: Input }],
    updateChange: [{ type: Output }],
    update: [{ type: Input }],
    oneToOne: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartComponent, [{
        type: Component,
        args: [{
                selector: 'lib-highcharts-angular',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { updateChange: [{
            type: Output
        }], options: [{
            type: Input
        }], update: [{
            type: Input
        }], Highcharts: [{
            type: Input
        }], constructorType: [{
            type: Input
        }], callbackFunction: [{
            type: Input
        }], oneToOne: [{
            type: Input
        }] }); })();
function AngularHighchartsChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.chart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.Highcharts;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.constructorType;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.callbackFunction;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.optionsValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateChange;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.oneToOne;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateOrCreateChart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0L2xpYi9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFPbkYsTUFBTTtBQUNOO0FBQVE7QUFBcUI7QUFBUSxJQUFuQyxZQUFvQixFQUFjO0FBQUksUUFBbEIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLDJCQVlyQixLQUFLO0FBQ3JCLDRCQUEyQixJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDakQsbUNBUXdCO0FBQ3hCLFlBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDMUMsZ0JBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQztBQUN6RSxhQUFLO0FBQUMsWUFBQSxJQUFJLENBQUMsQ0FBQztBQUNaLGdCQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDckIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FDOUIsQ0FBQztBQUNSLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxhQUFLO0FBQ0wsU0FBRztBQUNILEtBbEN5QztBQUN6QztBQUNPO0FBQ1E7QUFDVDtBQUFRLElBR1osSUFDSSxPQUFPLENBQUMsR0FBRztBQUNqQixRQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBQzVCLFFBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDL0IsS0FBRztBQUNIO0FBQVE7QUFDRDtBQUFtQjtBQUFRLElBQ2hDLElBQWEsTUFBTSxDQUFDLEdBQUc7QUFDekIsUUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ2QsWUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNqQyxZQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLFNBQUs7QUFDTCxLQUFHO0FBQ0g7MkRBMUJDLFNBQVMsU0FBQyxrQkFDVCxRQUFRLEVBQUUsd0JBQXdCLGtCQUNsQyxRQUFRLEVBQUUsRUFBRSxjQUNiOzBkQUVJO0FBQUM7QUFBbUI7QUFDVSxZQVJmLFVBQVU7QUFBRztBQUFHO0FBRWxDLHlCQVNDLEtBQUs7QUFBSyw4QkFDVixLQUFLO0FBQUssK0JBQ1YsS0FBSztBQUFLLHNCQUVWLEtBQUs7QUFDTiwyQkFLQyxNQUFNO0FBQUsscUJBQ1gsS0FBSztBQUFLLHVCQU1WLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFFO0FBQUM7QUFHSztBQUFxQjtBQUNVO0FBQXFCO0FBRTdCO0FBQXFCO0FBR2hFO0FBQXFCO0FBRWlCO0FBQXFCO0FBSWpCO0FBQXFCO0FBQTJEO0FBQXFCO0FBQTREO0FBQXFCO0FBQXdEO0FBQXFCO0FBQW1FO0FBQXFCOzs7QUEzQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVlBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFTQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBakNBLEFBT0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQXpCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFMQSxBQUFBLEFBV0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQU1BLEFBQUEsQUFDQSxBQUFBLEFBTUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1oaWdoY2hhcnRzLWFuZ3VsYXInLFxuICB0ZW1wbGF0ZTogJydcbn0pXG5cbmV4cG9ydCBjbGFzcyBBbmd1bGFySGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgY2hhcnQ6IGFueTtcbiAgQElucHV0KCkgSGlnaGNoYXJ0czogYW55O1xuICBASW5wdXQoKSBjb25zdHJ1Y3RvclR5cGU6IHN0cmluZztcbiAgQElucHV0KCkgY2FsbGJhY2tGdW5jdGlvbjogYW55O1xuICBvcHRpb25zVmFsdWU6IGFueTtcbiAgQElucHV0KClcbiAgc2V0IG9wdGlvbnModmFsKSB7XG4gICAgdGhpcy5vcHRpb25zVmFsdWUgPSB2YWw7XG4gICAgdGhpcy51cGRhdGVPckNyZWF0ZUNoYXJ0KCk7XG4gIH1cbiAgdXBkYXRlVmFsdWUgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHVwZGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XG4gIEBJbnB1dCgpIHNldCB1cGRhdGUodmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy51cGRhdGVPckNyZWF0ZUNoYXJ0KCk7XG4gICAgICB0aGlzLnVwZGF0ZUNoYW5nZS5lbWl0KGZhbHNlKTsgLy8gY2xlYXIgdGhlIGZsYWcgYWZ0ZXIgdXBkYXRlXG4gICAgfVxuICB9XG4gIEBJbnB1dCgpIG9uZVRvT25lOiBib29sZWFuO1xuXG4gIHVwZGF0ZU9yQ3JlYXRlQ2hhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuY2hhcnQgJiYgdGhpcy5jaGFydC51cGRhdGUpIHtcbiAgICAgIHRoaXMuY2hhcnQudXBkYXRlKHRoaXMub3B0aW9uc1ZhbHVlLCB0cnVlLCB0aGlzLm9uZVRvT25lIHx8IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFydCA9IHRoaXMuSGlnaGNoYXJ0c1t0aGlzLmNvbnN0cnVjdG9yVHlwZSB8fCAnY2hhcnQnXShcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLm9wdGlvbnNWYWx1ZSxcbiAgICAgICAgdGhpcy5jYWxsYmFja0Z1bmN0aW9uIHx8IG51bGxcbiAgICAgICk7XG4gICAgICB0aGlzLm9wdGlvbnNWYWx1ZS5zZXJpZXMgPSB0aGlzLmNoYXJ0LnVzZXJPcHRpb25zLnNlcmllcztcbiAgICB9XG4gIH07XG59XG4iXX0=