import { Component, ElementRef, EventEmitter, Input, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
var AngularHighchartsChartComponent = /** @class */ (function () {
    function AngularHighchartsChartComponent(el) {
        this.el = el;
        this.updateValue = false;
        this.updateChange = new EventEmitter(true);
        this.updateOrCreateChart = function () {
            if (this.chart && this.chart.update) {
                this.chart.update(this.optionsValue, true, this.oneToOne || false);
            }
            else {
                this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                this.optionsValue.series = this.chart.userOptions.series;
            }
        };
    }
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "options", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.optionsValue = val;
            this.updateOrCreateChart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "update", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this.updateOrCreateChart();
                this.updateChange.emit(false); // clear the flag after update
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    AngularHighchartsChartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AngularHighchartsChartComponent.propDecorators = {
        Highcharts: [{ type: Input }],
        constructorType: [{ type: Input }],
        callbackFunction: [{ type: Input }],
        options: [{ type: Input }],
        updateChange: [{ type: Output }],
        update: [{ type: Input }],
        oneToOne: [{ type: Input }]
    };
AngularHighchartsChartComponent.ɵfac = function AngularHighchartsChartComponent_Factory(t) { return new (t || AngularHighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AngularHighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularHighchartsChartComponent, selectors: [["lib-highcharts-angular"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne" }, outputs: { updateChange: "updateChange" }, decls: 0, vars: 0, template: function AngularHighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartComponent, [{
        type: Component,
        args: [{
                selector: 'lib-highcharts-angular',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { updateChange: [{
            type: Output
        }], options: [{
            type: Input
        }], update: [{
            type: Input
        }], Highcharts: [{
            type: Input
        }], constructorType: [{
            type: Input
        }], callbackFunction: [{
            type: Input
        }], oneToOne: [{
            type: Input
        }] }); })();
    return AngularHighchartsChartComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AngularHighchartsChartModule = /** @class */ (function () {
    function AngularHighchartsChartModule() {
    }
AngularHighchartsChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularHighchartsChartModule });
AngularHighchartsChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularHighchartsChartModule_Factory(t) { return new (t || AngularHighchartsChartModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularHighchartsChartModule, { declarations: [AngularHighchartsChartComponent], exports: [AngularHighchartsChartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [AngularHighchartsChartComponent],
                exports: [AngularHighchartsChartComponent]
            }]
    }], function () { return []; }, null); })();
    return AngularHighchartsChartModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// export * from './lib/angular-highcharts-chart.component';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AngularHighchartsChartModule, AngularHighchartsChartComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQvbGliL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC5jb21wb25lbnQudHMiLCJhbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQvbGliL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQW1FLElBUWpFLHlDQUFvQixFQUFjO0FBQUksUUFBbEIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLDJCQVlyQixLQUFLO0FBQ3JCLDRCQUEyQixJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDakQsbUNBUXdCO0FBQ3hCLFlBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO0FBQ3pDLGdCQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLENBQUM7QUFDekUsYUFBSztBQUFDLGlCQUFLO0FBQ1gsZ0JBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLENBQzNELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUNyQixJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUM5QixDQUFDO0FBQ1IsZ0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO0FBQy9ELGFBQUs7QUFDTCxTQUFHO0FBQ0gsS0FsQ3lDO0FBQ3pDLElBTUUsc0JBQ0ksb0RBQU87QUFBSTtBQUNKO0FBQ0g7QUFDVDtBQUNRLFFBTFAsVUFDWSxHQUFHO0FBQ2pCLFlBQUksSUFBSSxDQUFDLFlBQVksR0FBRyxHQUFHLENBQUM7QUFDNUIsWUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUMvQixTQUFHO0FBQ0Y7QUFDRztBQUEyQixPQUY1QjtBQUNILElBRUUsc0JBQWEsbURBQU07QUFBSTtBQUNaO0FBQ1c7QUFDWDtBQUFZLFFBSHZCLFVBQW9CLEdBQUc7QUFDekIsWUFBSSxJQUFJLEdBQUcsRUFBRTtBQUNiLGdCQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQ2pDLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLGFBQUs7QUFDTCxTQUFHO0FBQ0Y7QUFBMEI7QUFFSixPQUhwQixBQXBCTTtBQUFDOzRDQUxULFNBQVMsU0FBQyw5REFLc0I7UUFKL0IsUUFBUSxFQUFFLGxCQVFQLGdCQVhlLFVBQVU7QUFBRztHQUdHLHNCQUNsQyxRQUFRLEVBQUUsRUFBRSxyQ0FKNkI7QUFLMUMsQUFGRCw2QkFRRyxLQUFLO0FBQUssa0NBQ1YsS0FBSztBQUFLLG1DQUNWLEtBQUs7QUFBSywwQkFFVixLQUFLO0FBQ04sK0JBS0MsTUFBTTtBQUFLLHlCQUNYLEtBQUs7QUFBSywyQkFNVixLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsMENBNUJuQjtBQUFFO0FBQU07QUFBQztBQUFJO0FBQWtDO0FBRTVDO0FDRkg7QUFDc0I7QUFBOEM7Z0VBRW5FLFFBQVEsU0FBQztFQUNSLE9BQU8sRUFBRSxFQUNSLHNCQUNELFlBQVksRUFBRSxDQUFDLCtCQUErQixDQUFDLHNCQUMvQyxPQUFPLEVBQUUsQ0FBQywrQkFBK0IsQ0FBQyxrQkFDM0M7Ozs7Ozs7OztnREFDUztBQUFDLHVDQVRYO0FBQUU7QUFBTTtBQUFDO0FBQUk7QUFDUjtBQUF5QztBQUFJO0FBR3hDO0FBQUM7QUFDVDtBQUM2QjtBQUNWO0FBQUk7QUFBQzs7QURQQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBU0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFqQ0EsQUFPQSxBQUNBLEFBQUEsQUFEQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBekJBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUxBLEFBQUEsQUFXQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBTUEsQUFBQSxBQUNBLEFBQUEsQUFNQSxBQUFBLEFBNUJBLEFDQUEsQUFHQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdsaWItaGlnaGNoYXJ0cy1hbmd1bGFyJyxcbiAgdGVtcGxhdGU6ICcnXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIGNoYXJ0OiBhbnk7XG4gIEBJbnB1dCgpIEhpZ2hjaGFydHM6IGFueTtcbiAgQElucHV0KCkgY29uc3RydWN0b3JUeXBlOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhbGxiYWNrRnVuY3Rpb246IGFueTtcbiAgb3B0aW9uc1ZhbHVlOiBhbnk7XG4gIEBJbnB1dCgpXG4gIHNldCBvcHRpb25zKHZhbCkge1xuICAgIHRoaXMub3B0aW9uc1ZhbHVlID0gdmFsO1xuICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICB9XG4gIHVwZGF0ZVZhbHVlID0gZmFsc2U7XG4gIEBPdXRwdXQoKSB1cGRhdGVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKHRydWUpO1xuICBASW5wdXQoKSBzZXQgdXBkYXRlKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHRoaXMudXBkYXRlT3JDcmVhdGVDaGFydCgpO1xuICAgICAgdGhpcy51cGRhdGVDaGFuZ2UuZW1pdChmYWxzZSk7IC8vIGNsZWFyIHRoZSBmbGFnIGFmdGVyIHVwZGF0ZVxuICAgIH1cbiAgfVxuICBASW5wdXQoKSBvbmVUb09uZTogYm9vbGVhbjtcblxuICB1cGRhdGVPckNyZWF0ZUNoYXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmNoYXJ0ICYmIHRoaXMuY2hhcnQudXBkYXRlKSB7XG4gICAgICB0aGlzLmNoYXJ0LnVwZGF0ZSh0aGlzLm9wdGlvbnNWYWx1ZSwgdHJ1ZSwgdGhpcy5vbmVUb09uZSB8fCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhcnQgPSB0aGlzLkhpZ2hjaGFydHNbdGhpcy5jb25zdHJ1Y3RvclR5cGUgfHwgJ2NoYXJ0J10oXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICAgdGhpcy5vcHRpb25zVmFsdWUsXG4gICAgICAgIHRoaXMuY2FsbGJhY2tGdW5jdGlvbiB8fCBudWxsXG4gICAgICApO1xuICAgICAgdGhpcy5vcHRpb25zVmFsdWUuc2VyaWVzID0gdGhpcy5jaGFydC51c2VyT3B0aW9ucy5zZXJpZXM7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuZ3VsYXJIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL2FuZ3VsYXItaGlnaGNoYXJ0cy1jaGFydC5jb21wb25lbnQnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW0FuZ3VsYXJIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnRdLFxuICBleHBvcnRzOiBbQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgQW5ndWxhckhpZ2hjaGFydHNDaGFydE1vZHVsZSB7IH1cbiJdfQ==