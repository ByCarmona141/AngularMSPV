/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var AngularHighchartsChartComponent = /** @class */ (function () {
    function AngularHighchartsChartComponent(el) {
        this.el = el;
        this.updateValue = false;
        this.updateChange = new EventEmitter(true);
        this.updateOrCreateChart = function () {
            if (this.chart && this.chart.update) {
                this.chart.update(this.optionsValue, true, this.oneToOne || false);
            }
            else {
                this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                this.optionsValue.series = this.chart.userOptions.series;
            }
        };
    }
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "options", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.optionsValue = val;
            this.updateOrCreateChart();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AngularHighchartsChartComponent.prototype, "update", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this.updateOrCreateChart();
                this.updateChange.emit(false); // clear the flag after update
            }
        },
        enumerable: true,
        configurable: true
    });
    /** @nocollapse */
    AngularHighchartsChartComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AngularHighchartsChartComponent.propDecorators = {
        Highcharts: [{ type: Input }],
        constructorType: [{ type: Input }],
        callbackFunction: [{ type: Input }],
        options: [{ type: Input }],
        updateChange: [{ type: Output }],
        update: [{ type: Input }],
        oneToOne: [{ type: Input }]
    };
AngularHighchartsChartComponent.ɵfac = function AngularHighchartsChartComponent_Factory(t) { return new (t || AngularHighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AngularHighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularHighchartsChartComponent, selectors: [["lib-highcharts-angular"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne" }, outputs: { updateChange: "updateChange" }, decls: 0, vars: 0, template: function AngularHighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartComponent, [{
        type: Component,
        args: [{
                selector: 'lib-highcharts-angular',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { updateChange: [{
            type: Output
        }], options: [{
            type: Input
        }], update: [{
            type: Input
        }], Highcharts: [{
            type: Input
        }], constructorType: [{
            type: Input
        }], callbackFunction: [{
            type: Input
        }], oneToOne: [{
            type: Input
        }] }); })();
    return AngularHighchartsChartComponent;
}());
export { AngularHighchartsChartComponent };
function AngularHighchartsChartComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.chart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.Highcharts;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.constructorType;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.callbackFunction;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.optionsValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateValue;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateChange;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.oneToOne;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.updateOrCreateChart;
    /** @type {?} */
    AngularHighchartsChartComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0L2xpYi9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFDbkY7QUFJQSxJQUdFLHlDQUFvQixFQUFjO0FBQUksUUFBbEIsT0FBRSxHQUFGLEVBQUUsQ0FBWTtBQUFDLDJCQVlyQixLQUFLO0FBQ3JCLDRCQUEyQixJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUM7QUFDakQsbUNBUXdCO0FBQ3hCLFlBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDMUMsZ0JBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQztBQUN6RSxhQUFLO0FBQUMsWUFBQSxJQUFJLENBQUMsQ0FBQztBQUNaLGdCQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxDQUMzRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDckIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FDOUIsQ0FBQztBQUNSLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztBQUMvRCxhQUFLO0FBQ0wsU0FBRztBQUNILEtBbEN5QztBQUN6QyxJQU1FLHNCQUNJLG9EQUFPO0FBQUk7QUFDSjtBQUNIO0FBQ1Q7QUFDUSxRQUxQLFVBQ1ksR0FBRztBQUNqQixZQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBQzVCLFlBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7QUFDL0IsU0FBRztBQUNGO0FBQ0c7QUFBMkIsT0FGNUI7QUFDSCxJQUVFLHNCQUFhLG1EQUFNO0FBQUk7QUFDWjtBQUNXO0FBQ1g7QUFBWSxRQUh2QixVQUFvQixHQUFHO0FBQ3pCLFlBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNkLGdCQUFNLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQ2pDLGdCQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLGFBQUs7QUFDTCxTQUFHO0FBQ0Y7QUFBMEI7QUFFSixPQUhwQixBQXBCTTtBQUFDOzRDQUxULFNBQVMsU0FBQyw5REFLc0I7UUFKL0IsUUFBUSxFQUFFLGxCQVFQLGdCQVhlLFVBQVU7QUFBRztHQUdHLHNCQUNsQyxRQUFRLEVBQUUsRUFBRSxyQ0FKNkI7QUFLMUMsQUFGRCw2QkFRRyxLQUFLO0FBQUssa0NBQ1YsS0FBSztBQUFLLG1DQUNWLEtBQUs7QUFBSywwQkFFVixLQUFLO0FBQ04sK0JBS0MsTUFBTTtBQUFLLHlCQUNYLEtBQUs7QUFBSywyQkFNVixLQUFLO0FBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQUMsMENBNUJuQjtBQUFFO0FBQU0sU0FPSywrQkFBK0I7QUFDM0M7QUFHaUI7QUFDUDtBQUNpQjtBQUNiO0FBR0s7QUFDUjtBQUdJO0FBQXFCO0FBRy9CO0FBQXFCO0FBQzBCO0FBRXJEO0FBR3dCO0FBQ2pCO0FBQ2lCO0FBQXFCO0FBRS9CO0FBQXFCO0FBRWpDO0FBQXFCOzs7QUFwQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFRQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBWUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFqQ0EsQUFPQSxBQUNBLEFBQUEsQUFEQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUF6QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEEsQUFBQSxBQVdBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFNQSxBQUFBLEFBQ0EsQUFBQSxBQU1BLEFBQUEsQUE1QkEsQUFPQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbGliLWhpZ2hjaGFydHMtYW5ndWxhcicsXG4gIHRlbXBsYXRlOiAnJ1xufSlcblxuZXhwb3J0IGNsYXNzIEFuZ3VsYXJIaWdoY2hhcnRzQ2hhcnRDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cblxuICBjaGFydDogYW55O1xuICBASW5wdXQoKSBIaWdoY2hhcnRzOiBhbnk7XG4gIEBJbnB1dCgpIGNvbnN0cnVjdG9yVHlwZTogc3RyaW5nO1xuICBASW5wdXQoKSBjYWxsYmFja0Z1bmN0aW9uOiBhbnk7XG4gIG9wdGlvbnNWYWx1ZTogYW55O1xuICBASW5wdXQoKVxuICBzZXQgb3B0aW9ucyh2YWwpIHtcbiAgICB0aGlzLm9wdGlvbnNWYWx1ZSA9IHZhbDtcbiAgICB0aGlzLnVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKTtcbiAgfVxuICB1cGRhdGVWYWx1ZSA9IGZhbHNlO1xuICBAT3V0cHV0KCkgdXBkYXRlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcih0cnVlKTtcbiAgQElucHV0KCkgc2V0IHVwZGF0ZSh2YWwpIHtcbiAgICBpZiAodmFsKSB7XG4gICAgICB0aGlzLnVwZGF0ZU9yQ3JlYXRlQ2hhcnQoKTtcbiAgICAgIHRoaXMudXBkYXRlQ2hhbmdlLmVtaXQoZmFsc2UpOyAvLyBjbGVhciB0aGUgZmxhZyBhZnRlciB1cGRhdGVcbiAgICB9XG4gIH1cbiAgQElucHV0KCkgb25lVG9PbmU6IGJvb2xlYW47XG5cbiAgdXBkYXRlT3JDcmVhdGVDaGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jaGFydCAmJiB0aGlzLmNoYXJ0LnVwZGF0ZSkge1xuICAgICAgdGhpcy5jaGFydC51cGRhdGUodGhpcy5vcHRpb25zVmFsdWUsIHRydWUsIHRoaXMub25lVG9PbmUgfHwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoYXJ0ID0gdGhpcy5IaWdoY2hhcnRzW3RoaXMuY29uc3RydWN0b3JUeXBlIHx8ICdjaGFydCddKFxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIHRoaXMub3B0aW9uc1ZhbHVlLFxuICAgICAgICB0aGlzLmNhbGxiYWNrRnVuY3Rpb24gfHwgbnVsbFxuICAgICAgKTtcbiAgICAgIHRoaXMub3B0aW9uc1ZhbHVlLnNlcmllcyA9IHRoaXMuY2hhcnQudXNlck9wdGlvbnMuc2VyaWVzO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==