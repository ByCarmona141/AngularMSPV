(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-highcharts-chart', ['@angular/core','exports', '@angular/core'], factory) :
    (factory(global.ng.core,(global['angular-highcharts-chart'] = {}),global.ng.core));
}(this, (function (ɵngcc0,exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AngularHighchartsChartComponent = (function () {
        function AngularHighchartsChartComponent(el) {
            this.el = el;
            this.updateValue = false;
            this.updateChange = new core.EventEmitter(true);
            this.updateOrCreateChart = function () {
                if (this.chart && this.chart.update) {
                    this.chart.update(this.optionsValue, true, this.oneToOne || false);
                }
                else {
                    this.chart = this.Highcharts[this.constructorType || 'chart'](this.el.nativeElement, this.optionsValue, this.callbackFunction || null);
                    this.optionsValue.series = this.chart.userOptions.series;
                }
            };
        }
        Object.defineProperty(AngularHighchartsChartComponent.prototype, "options", {
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.optionsValue = val;
                this.updateOrCreateChart();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AngularHighchartsChartComponent.prototype, "update", {
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                if (val) {
                    this.updateOrCreateChart();
                    this.updateChange.emit(false); // clear the flag after update
                }
            },
            enumerable: true,
            configurable: true
        });
        /** @nocollapse */
        AngularHighchartsChartComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        AngularHighchartsChartComponent.propDecorators = {
            Highcharts: [{ type: core.Input }],
            constructorType: [{ type: core.Input }],
            callbackFunction: [{ type: core.Input }],
            options: [{ type: core.Input }],
            updateChange: [{ type: core.Output }],
            update: [{ type: core.Input }],
            oneToOne: [{ type: core.Input }]
        };
AngularHighchartsChartComponent.ɵfac = function AngularHighchartsChartComponent_Factory(t) { return new (t || AngularHighchartsChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
AngularHighchartsChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AngularHighchartsChartComponent, selectors: [["lib-highcharts-angular"]], inputs: { options: "options", update: "update", Highcharts: "Highcharts", constructorType: "constructorType", callbackFunction: "callbackFunction", oneToOne: "oneToOne" }, outputs: { updateChange: "updateChange" }, decls: 0, vars: 0, template: function AngularHighchartsChartComponent_Template(rf, ctx) { }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartComponent, [{
        type: core.Component,
        args: [{
                selector: 'lib-highcharts-angular',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { updateChange: [{
            type: core.Output
        }], options: [{
            type: core.Input
        }], update: [{
            type: core.Input
        }], Highcharts: [{
            type: core.Input
        }], constructorType: [{
            type: core.Input
        }], callbackFunction: [{
            type: core.Input
        }], oneToOne: [{
            type: core.Input
        }] }); })();
        return AngularHighchartsChartComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AngularHighchartsChartModule = (function () {
        function AngularHighchartsChartModule() {
        }
AngularHighchartsChartModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularHighchartsChartModule });
AngularHighchartsChartModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularHighchartsChartModule_Factory(t) { return new (t || AngularHighchartsChartModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularHighchartsChartModule, { declarations: [AngularHighchartsChartComponent], exports: [AngularHighchartsChartComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularHighchartsChartModule, [{
        type: core.NgModule,
        args: [{
                imports: [],
                declarations: [AngularHighchartsChartComponent],
                exports: [AngularHighchartsChartComponent]
            }]
    }], function () { return []; }, null); })();
        return AngularHighchartsChartModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // export * from './lib/angular-highcharts-chart.component';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.AngularHighchartsChartModule = AngularHighchartsChartModule;
    exports.ɵa = AngularHighchartsChartComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LnVtZC5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0L2xpYi9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQuY29tcG9uZW50LnRzIiwiYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0L2xpYi9hbmd1bGFyLWhpZ2hjaGFydHMtY2hhcnQubW9kdWxlLnRzIl0sIm5hbWVzIjpbIkV2ZW50RW1pdHRlciIsIkNvbXBvbmVudCIsIkVsZW1lbnRSZWYiLCJJbnB1dCIsIk91dHB1dCIsIk5nTW9kdWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFBeUQsUUFRdkQseUNBQW9CLEVBQWM7QUFBSSxZQUFsQixPQUFFLEdBQUYsRUFBRSxDQUFZO0FBQUMsK0JBWXJCLEtBQUs7QUFDckIsZ0NBQTJCLElBQUlBLGlCQUFZLENBQUMsSUFBSSxDQUFDO0FBQ2pELHVDQVF3QjtBQUN4QixnQkFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDekMsb0JBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLENBQUMsQ0FBQztBQUN6RSxpQkFBSztBQUFDLHFCQUFLO0FBQ1gsb0JBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksT0FBTyxDQUFDLENBQzNELElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUNyQixJQUFJLENBQUMsWUFBWSxFQUNqQixJQUFJLENBQUMsZ0JBQWdCLElBQUksSUFBSSxDQUM5QixDQUFDO0FBQ1Isb0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO0FBQy9ELGlCQUFLO0FBQ0wsYUFBRztBQUNILFNBbEN5QztBQUN6QyxRQU1FLHNCQUNJLG9EQUFPO0FBQUk7QUFDQTtBQUNDO0FBRVQsZ0JBTFAsVUFDWSxHQUFHO0FBQ2pCLGdCQUFJLElBQUksQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBQzVCLGdCQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0FBQy9CLGFBQUc7QUFDRjtBQUNPO0FBQStCLFdBRnBDO0FBQ0gsUUFFRSxzQkFBYSxtREFBTTtBQUFJO0FBRXZCO0FBQThCO0FBQ1AsZ0JBSHZCLFVBQW9CLEdBQUc7QUFDekIsZ0JBQUksSUFBSSxHQUFHLEVBQUU7QUFDYixvQkFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztBQUNqQyxvQkFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNwQyxpQkFBSztBQUNMLGFBQUc7QUFDRjtBQUVEO0FBQStCLFdBSDVCLEFBcEJVO0FBQUM7Z0RBTGJDLGNBQVMsOURBSytCO0FBTDlCLEFBU0g7S0FSTixRQUFRLEVBQUUsd0JBQXdCLHZDQVNuQyx3QkFabUJDLGVBQVU7QUFBRztRQUkvQixSQUo4QztLQUl0QyxFQUFFLEVBQUUsc0JBQ2IsL0JBTDBEO0FBR3ZDLGlDQVFqQkMsVUFBSztBQUFLLHNDQUNWQSxVQUFLO0FBQUssdUNBQ1ZBLFVBQUs7QUFBSyw4QkFFVkEsVUFBSztBQUNOLG1DQUtDQyxXQUFNO0FBQUssNkJBQ1hELFVBQUs7QUFBSywrQkFNVkEsVUFBSztBQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBVTtBQUFDLDhDQTVCdkI7QUFBRTtBQUFVO0FBQUM7QUFBUTtBQUFzQztBQUdyRDtBQ0hOO0FBQ1k7QUFBa0Q7d0VBRTdERSxhQUFRLFNBQUM7bUJBQ1IsT0FBTyxFQUFFLEVBQ1IsMEJBQ0QsWUFBWSxFQUFFLENBQUMsK0JBQStCLENBQUMsMEJBQy9DLE9BQU8sRUFBRSxDQUFDLCtCQUErQixDQUFDO0FBQzNDOzs7Ozs7OztnREFDYTtBQUFDLDJDQVRmO0FBQUU7QUFBVTtBQUFDO0FBQVE7QUFDSjtBQUE2QztBQUFRO0FBS3REO0FBQUM7QUFBUTtBQUNiO0FBRUg7QUFBUTtBQUFDO0FBQzJCO0FBQWtEO0FBQUM7QUFBbUU7QUFBQzs7QURWQSxBQVFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFZQSxBQUFBLEFBQ0EsQUFBQUwsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBakNBLEFBT0EsQUFDQSxBQUFBLEFBREEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQXpCQUMsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTEFDLEFBQUEsQUFXQUMsQUFBQSxBQUNBQSxBQUFBLEFBQ0FBLEFBQUEsQUFFQUEsQUFBQSxBQU1BQyxBQUFBLEFBQ0FELEFBQUEsQUFNQUEsQUFBQSxBQTVCQSxBQ0FBLEFBR0FFLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFSQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1oaWdoY2hhcnRzLWFuZ3VsYXInLFxuICB0ZW1wbGF0ZTogJydcbn0pXG5cbmV4cG9ydCBjbGFzcyBBbmd1bGFySGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgY2hhcnQ6IGFueTtcbiAgQElucHV0KCkgSGlnaGNoYXJ0czogYW55O1xuICBASW5wdXQoKSBjb25zdHJ1Y3RvclR5cGU6IHN0cmluZztcbiAgQElucHV0KCkgY2FsbGJhY2tGdW5jdGlvbjogYW55O1xuICBvcHRpb25zVmFsdWU6IGFueTtcbiAgQElucHV0KClcbiAgc2V0IG9wdGlvbnModmFsKSB7XG4gICAgdGhpcy5vcHRpb25zVmFsdWUgPSB2YWw7XG4gICAgdGhpcy51cGRhdGVPckNyZWF0ZUNoYXJ0KCk7XG4gIH1cbiAgdXBkYXRlVmFsdWUgPSBmYWxzZTtcbiAgQE91dHB1dCgpIHVwZGF0ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIodHJ1ZSk7XG4gIEBJbnB1dCgpIHNldCB1cGRhdGUodmFsKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy51cGRhdGVPckNyZWF0ZUNoYXJ0KCk7XG4gICAgICB0aGlzLnVwZGF0ZUNoYW5nZS5lbWl0KGZhbHNlKTsgLy8gY2xlYXIgdGhlIGZsYWcgYWZ0ZXIgdXBkYXRlXG4gICAgfVxuICB9XG4gIEBJbnB1dCgpIG9uZVRvT25lOiBib29sZWFuO1xuXG4gIHVwZGF0ZU9yQ3JlYXRlQ2hhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuY2hhcnQgJiYgdGhpcy5jaGFydC51cGRhdGUpIHtcbiAgICAgIHRoaXMuY2hhcnQudXBkYXRlKHRoaXMub3B0aW9uc1ZhbHVlLCB0cnVlLCB0aGlzLm9uZVRvT25lIHx8IGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFydCA9IHRoaXMuSGlnaGNoYXJ0c1t0aGlzLmNvbnN0cnVjdG9yVHlwZSB8fCAnY2hhcnQnXShcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLm9wdGlvbnNWYWx1ZSxcbiAgICAgICAgdGhpcy5jYWxsYmFja0Z1bmN0aW9uIHx8IG51bGxcbiAgICAgICk7XG4gICAgICB0aGlzLm9wdGlvbnNWYWx1ZS5zZXJpZXMgPSB0aGlzLmNoYXJ0LnVzZXJPcHRpb25zLnNlcmllcztcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudCB9IGZyb20gJy4vYW5ndWxhci1oaWdoY2hhcnRzLWNoYXJ0LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbQW5ndWxhckhpZ2hjaGFydHNDaGFydENvbXBvbmVudF0sXG4gIGV4cG9ydHM6IFtBbmd1bGFySGlnaGNoYXJ0c0NoYXJ0Q29tcG9uZW50XVxufSlcbmV4cG9ydCBjbGFzcyBBbmd1bGFySGlnaGNoYXJ0c0NoYXJ0TW9kdWxlIHsgfVxuIl19