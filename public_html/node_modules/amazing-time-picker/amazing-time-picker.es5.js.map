{"version":3,"file":"amazing-time-picker.es5.js","sources":["ts/src/app/atp-library/atp-core.service.ts","ts/src/app/atp-library/time-picker/time-picker.component.ts","../src/util/root.ts","../src/util/isFunction.ts","../src/util/isArray.ts","../src/util/isObject.ts","../src/util/errorObject.ts","../src/util/tryCatch.ts","../src/util/UnsubscriptionError.ts","../src/Subscription.ts","../src/Observer.ts","../src/symbol/rxSubscriber.ts","../src/Subscriber.ts","../src/util/toSubscriber.ts","../src/symbol/observable.ts","../src/util/noop.ts","../src/util/pipe.ts","../src/Observable.ts","../src/util/ObjectUnsubscribedError.ts","../src/SubjectSubscription.ts","../src/Subject.ts","../src/AsyncSubject.ts","../src/observable/BoundCallbackObservable.ts","../src/observable/bindCallback.ts","../src/add/observable/bindCallback.ts","../src/observable/BoundNodeCallbackObservable.ts","../src/observable/bindNodeCallback.ts","../src/add/observable/bindNodeCallback.ts","../src/util/isScheduler.ts","../src/observable/ScalarObservable.ts","../src/observable/EmptyObservable.ts","../src/observable/ArrayObservable.ts","../src/OuterSubscriber.ts","../src/util/isArrayLike.ts","../src/util/isPromise.ts","../src/symbol/iterator.ts","../src/InnerSubscriber.ts","../src/util/subscribeToResult.ts","../src/operators/combineLatest.ts","../src/observable/combineLatest.ts","../src/add/observable/combineLatest.ts","../src/observable/of.ts","../src/observable/PromiseObservable.ts","../src/observable/IteratorObservable.ts","../src/observable/ArrayLikeObservable.ts","../src/Notification.ts","../src/operators/observeOn.ts","../src/observable/FromObservable.ts","../src/observable/from.ts","../src/operators/mergeMap.ts","../src/util/identity.ts","../src/operators/mergeAll.ts","../src/operators/concatAll.ts","../src/observable/concat.ts","../src/add/observable/concat.ts","../src/observable/DeferObservable.ts","../src/observable/defer.ts","../src/add/observable/defer.ts","../src/observable/empty.ts","../src/add/observable/empty.ts","../src/observable/ForkJoinObservable.ts","../src/observable/forkJoin.ts","../src/add/observable/forkJoin.ts","../src/add/observable/from.ts","../src/observable/FromEventObservable.ts","../src/observable/fromEvent.ts","../src/add/observable/fromEvent.ts","../src/observable/FromEventPatternObservable.ts","../src/observable/fromEventPattern.ts","../src/add/observable/fromEventPattern.ts","../src/observable/fromPromise.ts","../src/add/observable/fromPromise.ts","../src/observable/GenerateObservable.ts","../src/observable/generate.ts","../src/add/observable/generate.ts","../src/observable/IfObservable.ts","../src/observable/if.ts","../src/add/observable/if.ts","../src/util/isNumeric.ts","../src/scheduler/Action.ts","../src/scheduler/AsyncAction.ts","../src/Scheduler.ts","../src/scheduler/AsyncScheduler.ts","../src/scheduler/async.ts","../src/observable/IntervalObservable.ts","../src/observable/interval.ts","../src/add/observable/interval.ts","../src/observable/merge.ts","../src/add/observable/merge.ts","../src/observable/race.ts","../src/add/observable/race.ts","../src/observable/NeverObservable.ts","../src/observable/never.ts","../src/add/observable/never.ts","../src/add/observable/of.ts","../src/operators/onErrorResumeNext.ts","../src/observable/onErrorResumeNext.ts","../src/add/observable/onErrorResumeNext.ts","../src/observable/PairsObservable.ts","../src/observable/pairs.ts","../src/add/observable/pairs.ts","../src/observable/RangeObservable.ts","../src/observable/range.ts","../src/add/observable/range.ts","../src/observable/UsingObservable.ts","../src/observable/using.ts","../src/add/observable/using.ts","../src/observable/ErrorObservable.ts","../src/observable/throw.ts","../src/add/observable/throw.ts","../src/util/isDate.ts","../src/observable/TimerObservable.ts","../src/observable/timer.ts","../src/add/observable/timer.ts","../src/operators/zip.ts","../src/observable/zip.ts","../src/add/observable/zip.ts","../src/operators/map.ts","../src/observable/dom/AjaxObservable.ts","../src/observable/dom/ajax.ts","../src/add/observable/dom/ajax.ts","../src/scheduler/QueueAction.ts","../src/scheduler/QueueScheduler.ts","../src/scheduler/queue.ts","../src/ReplaySubject.ts","../src/util/assign.ts","../src/observable/dom/WebSocketSubject.ts","../src/observable/dom/webSocket.ts","../src/add/observable/dom/webSocket.ts","../src/operators/buffer.ts","../src/operator/buffer.ts","../src/add/operator/buffer.ts","../src/operators/bufferCount.ts","../src/operator/bufferCount.ts","../src/add/operator/bufferCount.ts","../src/operators/bufferTime.ts","../src/operator/bufferTime.ts","../src/add/operator/bufferTime.ts","../src/operators/bufferToggle.ts","../src/operator/bufferToggle.ts","../src/add/operator/bufferToggle.ts","../src/operators/bufferWhen.ts","../src/operator/bufferWhen.ts","../src/add/operator/bufferWhen.ts","../src/operators/catchError.ts","../src/operator/catch.ts","../src/add/operator/catch.ts","../src/operators/combineAll.ts","../src/operator/combineAll.ts","../src/add/operator/combineAll.ts","../src/operator/combineLatest.ts","../src/add/operator/combineLatest.ts","../src/operators/concat.ts","../src/operator/concat.ts","../src/add/operator/concat.ts","../src/operator/concatAll.ts","../src/add/operator/concatAll.ts","../src/operators/concatMap.ts","../src/operator/concatMap.ts","../src/add/operator/concatMap.ts","../src/operators/concatMapTo.ts","../src/operator/concatMapTo.ts","../src/add/operator/concatMapTo.ts","../src/operators/count.ts","../src/operator/count.ts","../src/add/operator/count.ts","../src/operators/dematerialize.ts","../src/operator/dematerialize.ts","../src/add/operator/dematerialize.ts","../src/operators/debounce.ts","../src/operator/debounce.ts","../src/add/operator/debounce.ts","../src/operators/debounceTime.ts","../src/operator/debounceTime.ts","../src/add/operator/debounceTime.ts","../src/operators/defaultIfEmpty.ts","../src/operator/defaultIfEmpty.ts","../src/add/operator/defaultIfEmpty.ts","../src/operators/delay.ts","../src/operator/delay.ts","../src/add/operator/delay.ts","../src/operators/delayWhen.ts","../src/operator/delayWhen.ts","../src/add/operator/delayWhen.ts","../src/util/Set.ts","../src/operators/distinct.ts","../src/operator/distinct.ts","../src/add/operator/distinct.ts","../src/operators/distinctUntilChanged.ts","../src/operator/distinctUntilChanged.ts","../src/add/operator/distinctUntilChanged.ts","../src/operators/distinctUntilKeyChanged.ts","../src/operator/distinctUntilKeyChanged.ts","../src/add/operator/distinctUntilKeyChanged.ts","../src/operators/tap.ts","../src/operator/do.ts","../src/add/operator/do.ts","../src/operators/exhaust.ts","../src/operator/exhaust.ts","../src/add/operator/exhaust.ts","../src/operators/exhaustMap.ts","../src/operator/exhaustMap.ts","../src/add/operator/exhaustMap.ts","../src/operators/expand.ts","../src/operator/expand.ts","../src/add/operator/expand.ts","../src/util/ArgumentOutOfRangeError.ts","../src/operators/elementAt.ts","../src/operator/elementAt.ts","../src/add/operator/elementAt.ts","../src/operators/filter.ts","../src/operator/filter.ts","../src/add/operator/filter.ts","../src/operators/finalize.ts","../src/operator/finally.ts","../src/add/operator/finally.ts","../src/operators/find.ts","../src/operator/find.ts","../src/add/operator/find.ts","../src/operators/findIndex.ts","../src/operator/findIndex.ts","../src/add/operator/findIndex.ts","../src/util/EmptyError.ts","../src/operators/first.ts","../src/operator/first.ts","../src/add/operator/first.ts","../src/util/MapPolyfill.ts","../src/util/Map.ts","../src/util/FastMap.ts","../src/operators/groupBy.ts","../src/operator/groupBy.ts","../src/add/operator/groupBy.ts","../src/operators/ignoreElements.ts","../src/operator/ignoreElements.ts","../src/add/operator/ignoreElements.ts","../src/operators/isEmpty.ts","../src/operator/isEmpty.ts","../src/add/operator/isEmpty.ts","../src/operators/audit.ts","../src/operator/audit.ts","../src/add/operator/audit.ts","../src/operators/auditTime.ts","../src/operator/auditTime.ts","../src/add/operator/auditTime.ts","../src/operators/last.ts","../src/operator/last.ts","../src/add/operator/last.ts","../src/operator/let.ts","../src/add/operator/let.ts","../src/operators/every.ts","../src/operator/every.ts","../src/add/operator/every.ts","../src/operator/map.ts","../src/add/operator/map.ts","../src/operators/mapTo.ts","../src/operator/mapTo.ts","../src/add/operator/mapTo.ts","../src/operators/materialize.ts","../src/operator/materialize.ts","../src/add/operator/materialize.ts","../src/operators/scan.ts","../src/operators/takeLast.ts","../src/operators/reduce.ts","../src/operators/max.ts","../src/operator/max.ts","../src/add/operator/max.ts","../src/operators/merge.ts","../src/operator/merge.ts","../src/add/operator/merge.ts","../src/operator/mergeAll.ts","../src/add/operator/mergeAll.ts","../src/operator/mergeMap.ts","../src/add/operator/mergeMap.ts","../src/operators/mergeMapTo.ts","../src/operator/mergeMapTo.ts","../src/add/operator/mergeMapTo.ts","../src/operators/mergeScan.ts","../src/operator/mergeScan.ts","../src/add/operator/mergeScan.ts","../src/operators/min.ts","../src/operator/min.ts","../src/add/operator/min.ts","../src/operators/refCount.ts","../src/observable/ConnectableObservable.ts","../src/operators/multicast.ts","../src/operator/multicast.ts","../src/add/operator/multicast.ts","../src/operator/observeOn.ts","../src/add/operator/observeOn.ts","../src/operator/onErrorResumeNext.ts","../src/add/operator/onErrorResumeNext.ts","../src/operators/pairwise.ts","../src/operator/pairwise.ts","../src/add/operator/pairwise.ts","../src/util/not.ts","../src/operators/partition.ts","../src/operator/partition.ts","../src/add/operator/partition.ts","../src/operators/pluck.ts","../src/operator/pluck.ts","../src/add/operator/pluck.ts","../src/operators/publish.ts","../src/operator/publish.ts","../src/add/operator/publish.ts","../src/BehaviorSubject.ts","../src/operators/publishBehavior.ts","../src/operator/publishBehavior.ts","../src/add/operator/publishBehavior.ts","../src/operators/publishReplay.ts","../src/operator/publishReplay.ts","../src/add/operator/publishReplay.ts","../src/operators/publishLast.ts","../src/operator/publishLast.ts","../src/add/operator/publishLast.ts","../src/operators/race.ts","../src/operator/race.ts","../src/add/operator/race.ts","../src/operator/reduce.ts","../src/add/operator/reduce.ts","../src/operators/repeat.ts","../src/operator/repeat.ts","../src/add/operator/repeat.ts","../src/operators/repeatWhen.ts","../src/operator/repeatWhen.ts","../src/add/operator/repeatWhen.ts","../src/operators/retry.ts","../src/operator/retry.ts","../src/add/operator/retry.ts","../src/operators/retryWhen.ts","../src/operator/retryWhen.ts","../src/add/operator/retryWhen.ts","../src/operators/sample.ts","../src/operator/sample.ts","../src/add/operator/sample.ts","../src/operators/sampleTime.ts","../src/operator/sampleTime.ts","../src/add/operator/sampleTime.ts","../src/operator/scan.ts","../src/add/operator/scan.ts","../src/operators/sequenceEqual.ts","../src/operator/sequenceEqual.ts","../src/add/operator/sequenceEqual.ts","../src/operators/share.ts","../src/operator/share.ts","../src/add/operator/share.ts","../src/operators/shareReplay.ts","../src/operator/shareReplay.ts","../src/add/operator/shareReplay.ts","../src/operators/single.ts","../src/operator/single.ts","../src/add/operator/single.ts","../src/operators/skip.ts","../src/operator/skip.ts","../src/add/operator/skip.ts","../src/operators/skipLast.ts","../src/operator/skipLast.ts","../src/add/operator/skipLast.ts","../src/operators/skipUntil.ts","../src/operator/skipUntil.ts","../src/add/operator/skipUntil.ts","../src/operators/skipWhile.ts","../src/operator/skipWhile.ts","../src/add/operator/skipWhile.ts","../src/operators/startWith.ts","../src/operator/startWith.ts","../src/add/operator/startWith.ts","../src/util/Immediate.ts","../src/scheduler/AsapAction.ts","../src/scheduler/AsapScheduler.ts","../src/scheduler/asap.ts","../src/observable/SubscribeOnObservable.ts","../src/operators/subscribeOn.ts","../src/operator/subscribeOn.ts","../src/add/operator/subscribeOn.ts","../src/operators/switchMap.ts","../src/operators/switchAll.ts","../src/operator/switch.ts","../src/add/operator/switch.ts","../src/operator/switchMap.ts","../src/add/operator/switchMap.ts","../src/operators/switchMapTo.ts","../src/operator/switchMapTo.ts","../src/add/operator/switchMapTo.ts","../src/operators/take.ts","../src/operator/take.ts","../src/add/operator/take.ts","../src/operator/takeLast.ts","../src/add/operator/takeLast.ts","../src/operators/takeUntil.ts","../src/operator/takeUntil.ts","../src/add/operator/takeUntil.ts","../src/operators/takeWhile.ts","../src/operator/takeWhile.ts","../src/add/operator/takeWhile.ts","../src/operators/throttle.ts","../src/operator/throttle.ts","../src/add/operator/throttle.ts","../src/operators/throttleTime.ts","../src/operator/throttleTime.ts","../src/add/operator/throttleTime.ts","../src/operators/timeInterval.ts","../src/operator/timeInterval.ts","../src/add/operator/timeInterval.ts","../src/util/TimeoutError.ts","../src/operators/timeout.ts","../src/operator/timeout.ts","../src/add/operator/timeout.ts","../src/operators/timeoutWith.ts","../src/operator/timeoutWith.ts","../src/add/operator/timeoutWith.ts","../src/operators/timestamp.ts","../src/operator/timestamp.ts","../src/add/operator/timestamp.ts","../src/operators/toArray.ts","../src/operator/toArray.ts","../src/add/operator/toArray.ts","../src/add/operator/toPromise.ts","../src/operators/window.ts","../src/operator/window.ts","../src/add/operator/window.ts","../src/operators/windowCount.ts","../src/operator/windowCount.ts","../src/add/operator/windowCount.ts","../src/operators/windowTime.ts","../src/operator/windowTime.ts","../src/add/operator/windowTime.ts","../src/operators/windowToggle.ts","../src/operator/windowToggle.ts","../src/add/operator/windowToggle.ts","../src/operators/windowWhen.ts","../src/operator/windowWhen.ts","../src/add/operator/windowWhen.ts","../src/operators/withLatestFrom.ts","../src/operator/withLatestFrom.ts","../src/add/operator/withLatestFrom.ts","../src/operator/zip.ts","../src/add/operator/zip.ts","../src/operators/zipAll.ts","../src/operator/zipAll.ts","../src/add/operator/zipAll.ts","../src/testing/SubscriptionLog.ts","../src/testing/SubscriptionLoggable.ts","../src/util/applyMixins.ts","../src/testing/ColdObservable.ts","../src/testing/HotObservable.ts","../src/scheduler/VirtualTimeScheduler.ts","../src/testing/TestScheduler.ts","../src/util/AnimationFrame.ts","../src/scheduler/AnimationFrameAction.ts","../src/scheduler/AnimationFrameScheduler.ts","../src/scheduler/animationFrame.ts","../src/operators.ts","../src/Rx.ts","ts/src/app/atp-library/atp-time-picker/atp-time-picker.component.ts","ts/src/app/atp-library/preferences.ts","ts/src/app/atp-library/atp-time-picker.service.ts","ts/src/app/atp-library/atp.directive.ts","ts/src/app/atp-library/atp-time-picker.module.ts","ts/amazing-time-picker.ts"],"names":["core","global","errorObject_1","UnsubscriptionError","__extends","Subscription","isArray_1","root_1","Subscriber","Observer_1","rxSubscriber_1","pipe","Observable","observable","observable_1","ObjectUnsubscribedError","Subject","AnonymousSubject","AsyncSubject","bindCallback_1","dispatchError","dispatchNext","bindNodeCallback_1","root","isArrayLike_1","iterator_1","iterator","combineLatest","combineLatest_1","Notification","from_1","of_1","concat","defer_1","empty_1","forkJoin_1","fromEvent_1","fromEventPattern_1","fromPromise_1","generate_1","if_1","Scheduler","Scheduler_1","async_1","interval_1","merge","race","never_1","onErrorResumeNext","onErrorResumeNext_1","dispatch","pairs_1","range_1","using_1","throw_1","timer_1","zip","zip_1","AjaxResponse","AjaxTimeoutError","AjaxError","ajax_1","ReplaySubject","queue_1","assign_1","webSocket_1","buffer","buffer_1","bufferCount","bufferCount_1","bufferTime","bufferTime_1","bufferToggle","bufferToggle_1","bufferWhen","bufferWhen_1","_catch","catch_1","combineAll","combineAll_1","concat_2","concat_1","concatAll","concatAll_1","concatMap","concatMap_1","concatMapTo","concatMapTo_1","count","count_1","dematerialize","dematerialize_1","debounce","debounce_1","debounceTime","debounceTime_1","defaultIfEmpty","defaultIfEmpty_1","delay","delay_1","delayWhen","delayWhen_1","distinct","Set_1","distinct_1","distinctUntilChanged","distinctUntilChanged_1","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","do_1","exhaust","exhaust_1","exhaustMap","exhaustMap_1","expand","expand_1","ArgumentOutOfRangeError","elementAt","elementAt_1","filter","filter_1","_finally","finally_1","find","find_1","findIndex","findIndex_1","EmptyError","first","first_1","groupBy","Map_1","GroupedObservable","groupBy_1","ignoreElements","ignoreElements_1","isEmpty","isEmpty_1","audit","audit_1","auditTime","auditTime_1","last","last_1","let_1","every","every_1","map","map_1","mapTo","mapTo_1","materialize","materialize_1","max","max_1","merge_2","merge_1","mergeAll","mergeAll_1","mergeMap","mergeMap_1","mergeMapTo","mergeMapTo_1","mergeScan","mergeScan_1","min","min_1","RefCountOperator","RefCountSubscriber","ConnectableObservable","multicast","multicast_1","observeOn","observeOn_1","pairwise","pairwise_1","partition","partition_1","pluck","pluck_1","publish","publish_1","BehaviorSubject","publishBehavior","publishBehavior_1","publishReplay","publishReplay_1","publishLast","publishLast_1","race_2","race_1","reduce","reduce_1","repeat","repeat_1","repeatWhen","repeatWhen_1","retry","retry_1","retryWhen","retryWhen_1","sample","sample_1","sampleTime","sampleTime_1","scan","scan_1","sequenceEqual","sequenceEqual_1","share","share_1","shareReplay","shareReplay_1","single","single_1","skip","skip_1","skipLast","skipLast_1","skipUntil","skipUntil_1","skipWhile","skipWhile_1","startWith","startWith_1","Immediate_1","asap_1","subscribeOn","subscribeOn_1","_switch","switch_1","switchMap","switchMap_1","switchMapTo","switchMapTo_1","take","take_1","takeLast","takeLast_1","takeUntil","takeUntil_1","takeWhile","takeWhile_1","throttle","throttle_1","throttleTime","throttleTime_1","timeInterval","TimeInterval","timeInterval_1","TimeoutError","timeout","timeout_1","timeoutWith","timeoutWith_1","Timestamp","timestamp","timestamp_1","toArray","toArray_1","window","window_1","windowCount","windowCount_1","windowTime","windowTime_1","windowToggle","windowToggle_1","WindowOperator","windowWhen","WindowSubscriber","windowWhen_1","withLatestFrom","withLatestFrom_1","zipAll","zipAll_1","VirtualTimeScheduler","TestScheduler","AnimationFrame_1"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ITime } from './definitions';\nexport class AtpCoreService {\nconstructor() { }\n/**\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\npublic allowedTimes (min, max) {\n    const /** @type {?} */ allTimes = [];\n    const /** @type {?} */ nowMinHour = +min.split(':')[0];\n    const /** @type {?} */ nowMaxHour = +max.split(':')[0];\n    const /** @type {?} */ nowMinMin = +min.split(':')[1];\n    const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n    for (let /** @type {?} */ i = nowMinHour; i <= nowMaxHour; i++) {\n      let /** @type {?} */ j = 0, /** @type {?} */\n          jDest = 59;\n      if (i === nowMinHour) {\n        j = nowMinMin;\n      }else if (i === nowMaxHour) {\n        jDest = nowMaxMin;\n      }\n      for (j; j <= jDest; j++) {\n        const /** @type {?} */ hour = i <= 12 ? i : i - 12;\n        const /** @type {?} */ minute = j;\n        const /** @type {?} */ ampm = i < 12 ? 'AM' : 'PM';\n        allTimes.push(hour + ':' + minute + ' ' + ampm);\n      }\n    }\n    return allTimes;\n  }\n/**\n * @param {?} type\n * @return {?}\n */\npublic ClockMaker (type: 'minute' | 'hour'): Array<any> {\n    const /** @type {?} */ items = [];\n    const /** @type {?} */ timeVal = (type === 'minute') ? 60 : 12;\n    const /** @type {?} */ timeStep = (type === 'minute') ? 5 : 1;\n    const /** @type {?} */ timeStart = (type === 'minute') ? 0 : 1;\n    const /** @type {?} */ r = 124;\n    const /** @type {?} */ j = r - 25;\n\n    for (let /** @type {?} */ min = timeStart; min <= timeVal; min += timeStep) {\n      if (min !== 60) {\n        const /** @type {?} */ str = String(min);\n        const /** @type {?} */ x = j * Math.sin(Math.PI * 2 * (min / timeVal));\n        const /** @type {?} */ y = j * Math.cos(Math.PI * 2 * (min / timeVal));\n\n        items.push({\n          time: str,\n          left: (x + r - 17) + 'px',\n          top: (-y + r - 17) + 'px',\n          type\n        });\n      }\n    }\n    return items;\n  }\n/**\n * @param {?} time\n * @return {?}\n */\npublic TimeToString(time: ITime): string {\n    const { ampm, minute, hour } = time;\n    let /** @type {?} */ hh = ampm === 'PM' ? +hour + 12 : +hour;\n    if (ampm === 'AM' && hh === 12) {\n      hh = 0;\n    }\n    if ( hh === 24) {\n      hh = 12;\n    }\n    hh = hh < 10 ? '0' + hh : /** @type {?} */(( '' + hh as any));\n    const /** @type {?} */ mm = minute < 10 ? '0' + minute : minute;\n    return `${hh}:${mm}`;\n  }\n/**\n * Converts 00:00 format to ITime object\n * @param {?} time\n * @return {?}\n */\npublic StringToTime (time: string): ITime {\n    const [h, m] = time.split(':');\n    let /** @type {?} */ hour = +h > 12 ? +h - 12 : +h;\n    hour = hour === 0 ? 12 : hour;\n    const /** @type {?} */ ampm = +h >= 12 ? 'PM' : 'AM';\n    return {\n      ampm, minute: +m, hour\n    };\n  }\n/**\n * \\@experimental\n * @param {?} ele\n * @param {?} parrentPos\n * @param {?} step\n * @return {?}\n */\npublic CalcDegrees (ele: any, parrentPos: any, step: number): number {\n    const /** @type {?} */ clock = {\n      width: ele.currentTarget.offsetWidth,\n      height: ele.currentTarget.offsetHeight\n    };\n    const /** @type {?} */ targetX = clock.width / 2;\n    const /** @type {?} */ targetY = clock.height / 2;\n    const /** @type {?} */ Vx = Math.round((ele.clientX - parrentPos.left) - targetX);\n    const /** @type {?} */ Vy = Math.round(targetY - (ele.clientY - parrentPos.top));\n    let /** @type {?} */ radians = -Math.atan2(Vy, Vx);\n    radians += 2.5 * Math.PI;\n\n    let /** @type {?} */ degrees = Math.round(radians * 180 / Math.PI);\n    const /** @type {?} */ degMod = degrees % step;\n    if (degMod === 0) {\n      return degrees;\n    } else if (degMod >= step / 2) {\n      degrees = degrees + (step - degMod);\n    } else if (degMod < step / 2) {\n      degrees = degrees - degMod;\n    }\n    return degrees;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AtpCoreService_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpCoreService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpCoreService.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, OnInit } from '@angular/core';\nimport { IClockNumber, IDisplayPreference, TimePickerConfig } from '../definitions';\nimport { AtpCoreService } from '../atp-core.service';\nimport { ITime } from '../definitions';\nexport class TimePickerComponent implements OnInit {\n\n  _ref: any;\npublic subject: any = null;\npublic activeModal = false;\npublic timerElement: any;\npublic clockObject: Array<any>;\npublic isClicked: boolean;\npublic clockType: 'minute' | 'hour' = 'hour';\npublic time: ITime = {\n    ampm: 'AM',\n    minute: 0,\n    hour: 12\n  };\npublic nowTime: any = this.time.hour;\npublic degree: any;\npublic config: TimePickerConfig;\npublic appRef: any;\npublic isPopup = true;\npublic allowed: any;\npublic preference: IDisplayPreference;\npublic changeToMin: boolean;\nprivate animationTime = 0;\n/**\n * @param {?} core\n */\nconstructor(\nprivate core: AtpCoreService\n  ) { }\n/**\n * @param {?} time\n * @return {?}\n */\npublic ParseStringToTime (time: string): void {\n    time = (time === '' || time === undefined || time === null) ? this.time.hour + ':' + this.time.minute : time;\n    this.time = this.core.StringToTime(time);\n  }\n/**\n * @return {?}\n */\npublic GetTime () {\n    const /** @type {?} */ time = this.core.TimeToString(this.time);\n    this.subject.next(time);\n  }\n\n  clockMaker = () => {\n    const /** @type {?} */ type = this.clockType;\n    this.clockObject = this.core.ClockMaker(type);\n    this.setArrow(null);\n  }\n\n  setActiveTime = () => {\n    this.nowTime = (this.clockType === 'minute' ? this.time.minute : this.time.hour);\n  }\n\n  setArrow = (obj: any) => {\n    if (obj) {\n      this.clockType = obj.type;\n      if (this.clockType === 'minute') {\n        this.time.minute = obj.time;\n      } else {\n        this.time.hour = obj.time;\n      }\n    }\n    const /** @type {?} */ step = (this.clockType === 'minute') ? 6 : 30;\n    const /** @type {?} */ time = (this.clockType === 'minute') ? this.time.minute : this.time.hour;\n    const /** @type {?} */ degrees = time * step;\n    this.rotationClass(degrees);\n    this.setActiveTime();\n  }\n\n  rotationClass = (degrees: any) => {\n    this.degree = degrees;\n  }\n/**\n * @return {?}\n */\nsetTime() {\n    this.isClicked = false;\n    if (this.config.changeToMinutes && !this.config.onlyHour && this.clockType === 'hour') {\n      this.ChangeAnimational('minute');\n    }\n  }\n\n  getDegree = (ele: any) => {\n    const /** @type {?} */ step = this.clockType === 'minute' ? 6 : 30;\n    const /** @type {?} */ parrentPos = ele.currentTarget.getBoundingClientRect();\n    if (this.isClicked && (ele.currentTarget === ele.target || ele.target.nodeName === 'BUTTON')) {\n      const /** @type {?} */ clock = {\n        width: ele.currentTarget.offsetWidth,\n        height: ele.currentTarget.offsetHeight\n      };\n      const /** @type {?} */ degrees = this.core.CalcDegrees(ele, parrentPos, step);\n      let /** @type {?} */ hour = this.time.hour, /** @type {?} */\n          minute = this.time.minute;\n\n      if (this.clockType === 'hour') {\n        hour = (degrees / step);\n        hour = (hour > 12) ? hour - 12 : hour;\n      } else if (this.clockType === 'minute') {\n        minute = (degrees / step);\n        minute = (minute > 59) ? minute - 60 : minute;\n      }\n\n      const /** @type {?} */ min = this.config.rangeTime.start, /** @type {?} */\n            max = this.config.rangeTime.end;\n\n      const /** @type {?} */ nowMinHour = +min.split(':')[0] < 12 ? +min.split(':')[0] : +min.split(':')[0] - 12;\n      const /** @type {?} */ nowMaxHour = +max.split(':')[0] < 12 ? +max.split(':')[0] : +max.split(':')[0] - 12;\n      const /** @type {?} */ nowMinMin = +min.split(':')[1];\n      const /** @type {?} */ nowMaxMin = +max.split(':')[1];\n\n      const /** @type {?} */ nowTime = this.GetNowTime(hour, this.time.ampm, minute);\n      if (this.allowed.indexOf(nowTime) > -1) {\n        this.time.hour = hour;\n        this.time.minute = minute;\n        this.rotationClass(degrees);\n        this.setActiveTime();\n      }else if (this.clockType === 'hour' && (hour === nowMinHour && minute <= nowMinMin)) {\n        this.time.hour = nowMinHour;\n        this.time.minute = nowMinMin;\n      }else if (this.clockType === 'hour' && (hour === nowMaxHour && minute >= nowMaxMin)) {\n        this.time.hour = nowMaxHour;\n        this.time.minute = nowMaxMin;\n      }\n    }\n  }\n/**\n * @param {?} hour\n * @param {?} ampm\n * @param {?} minute\n * @return {?}\n */\nprivate GetNowTime (hour: number, ampm: 'AM' | 'PM', minute: number): string {\n    const /** @type {?} */ Hour = (hour === 12 && ampm === 'AM') ? '0' : hour;\n    const /** @type {?} */ nowTime = Hour + ':' + minute + ' ' + ampm;\n    return nowTime;\n  }\n/**\n * @return {?}\n */\ncheckBet() {\n    const /** @type {?} */ nowTime = this.GetNowTime(this.time.hour, this.time.ampm, this.time.minute);\n    if (this.allowed.indexOf(nowTime) === -1) {\n      this.ParseStringToTime(this.config.rangeTime.start);\n      this.setArrow(null);\n      this.setActiveTime();\n    }\n  }\n/**\n * @return {?}\n */\nmodalAnimation() {\n    setTimeout(() => {\n      this.activeModal = true;\n    }, 1);\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    this.allowed = this.core.allowedTimes (this.config.rangeTime.start, this.config.rangeTime.end);\n    if (this.config && this.config.onlyMinute) {\n      this.clockType = 'minute';\n    }\n    if (this.config) {\n      if (this.config.onlyPM) {\n        this.time.ampm = 'PM';\n      } else if (this.config.onlyAM) {\n        this.time.ampm = 'AM';\n      }\n    }\n    this.clockMaker();\n    this.modalAnimation();\n  }\n/**\n * @return {?}\n */\npublic MinuteClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyHour) {\n      return false;\n    }\n\n    this.ChangeAnimational('minute');\n  }\n/**\n * @return {?}\n */\npublic HourClick () {\n    /**\n     * We are not permitting user to select the minute.\n     * but anyway, it will return the standard time, if provided the default time.\n     */\n    if (this.config && this.config.onlyMinute) {\n      return false;\n    }\n    this.ChangeAnimational('hour');\n  }\n/**\n * @param {?} type\n * @return {?}\n */\nChangeAnimational(type: 'minute' | 'hour') {\n    if (this.clockType !== type) {\n      if (this.config.animation === 'fade') {\n        this.changeToMin = true;\n        setTimeout(() => {\n          this.changeToMin = false;\n          this.clockType = type;\n          this.clockMaker();\n        }, 200);\n      } else if (this.config.animation === 'rotate') {\n        this.animationTime = 0.4;\n        this.clockType = type;\n        this.clockMaker();\n      } else {\n        this.clockType = type;\n        this.clockMaker();\n      }\n    }\n  }\n/**\n * @return {?}\n */\nSetAM () {\n    if (this.config && this.config.onlyPM) {\n      return false;\n    }\n    this.time.ampm = 'AM';\n    this.checkBet();\n  }\n/**\n * @return {?}\n */\nSetPM () {\n    if (this.config && this.config.onlyAM) {\n      return false;\n    }\n    this.time.ampm = 'PM';\n    this.checkBet();\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nClose(e: any) {\n    if (e.target === e.currentTarget) {\n      if (this.isPopup === true) {\n        this.activeModal = false;\n        setTimeout(() => {\n          this.appRef.detachView(this._ref.hostView);\n          this._ref.destroy();\n        }, 400);\n      }\n    }\n  }\n/**\n * @return {?}\n */\ngetClockArrowStyle() {\n    let /** @type {?} */ arrowStyle = {};\n    if (this.config.animation === 'rotate') {\n        arrowStyle = {\n          transform: 'rotate(' + this.degree + 'deg)',\n          '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n          background: this.config.arrowStyle.background,\n          '-webkit-transition': 'transform ' + this.getAnimationTime(),\n          transition: 'transform ' + + this.getAnimationTime()\n        };\n    }else {\n      arrowStyle = {\n        transform: 'rotate(' + this.degree + 'deg)',\n        '-webkit-transform': 'rotate(' + this.degree + 'deg)',\n        background: this.config.arrowStyle.background,\n      };\n    }\n    return arrowStyle;\n  }\n/**\n * @return {?}\n */\ngetAnimationTime() {\n    return this.animationTime + 's';\n  }\n/**\n * Event on clock mouse click down\n * @param {?} event - captured event\n * @return {?}\n */\nupdateClockDown(event) {\n    this.isClicked = true;\n    this.animationTime = 0;\n    this.getDegree(event);\n  }\n/**\n * @return {?}\n */\nsetNewRotation() {\n    const /** @type {?} */ targetDegree = ((this.time.minute / 60) * 360) + 360;\n    const /** @type {?} */ targetDegree2 = targetDegree * 2;\n\n    const /** @type {?} */ diff1 = Math.abs(this.degree - targetDegree);\n    const /** @type {?} */ diff2 = Math.abs(this.degree - targetDegree2);\n\n    if (diff1 < diff2) {\n      this.rotationClass(targetDegree);\n    } else {\n      this.rotationClass(targetDegree2);\n    }\n  }\n/**\n * @return {?}\n */\npublic GetSeparator () {\n    if (this.preference && this.preference.separator) {\n      return this.preference.separator;\n    }\n    return ':';\n  }\n/**\n * @param {?} period\n * @return {?}\n */\npublic GetPeriod (period: 'AM' | 'PM') {\n    if (this.preference && this.preference.period) {\n      return this.preference.period(period);\n    }\n    return period;\n  }\n/**\n * @return {?}\n */\npublic GetMinute () {\n    if (this.preference && this.preference.minute) {\n      return this.preference.minute(this.time.minute);\n    }\n    let /** @type {?} */ min: string = this.time.minute.toString();\n    if (+min < 10) {\n      min = '0' + min;\n    }\n    return min;\n  }\n/**\n * @return {?}\n */\npublic GetHour () {\n    if (this.preference && this.preference.hour) {\n      return this.preference.hour(this.time.hour);\n    }\n    return this.time.hour;\n  }\n/**\n * @param {?} clock\n * @return {?}\n */\npublic GetClockTime(clock: IClockNumber) {\n    if ( ! this.preference) {\n      return clock.time;\n    }\n    if ( this.clockType === 'hour' && this.preference.clockHour) {\n      return this.preference.clockHour(clock.time);\n    }\n    if ( this.clockType === 'minute' && this.preference.clockMinute) {\n      return this.preference.clockMinute(clock.time);\n    }\n    return clock.time;\n  }\n/**\n * @param {?} key\n * @return {?}\n */\npublic GetLabel (key: string) {\n    const /** @type {?} */ defaults = {\n      'ok': 'Ok',\n      'cancel': 'Cancel'\n    };\n    if ((this.preference && this.preference.labels && this.preference.labels.ok)) {\n      defaults.ok = this.preference.labels.ok;\n    }\n    if ((this.preference && this.preference.labels && this.preference.labels.cancel)) {\n      defaults.cancel = this.preference.labels.cancel;\n    }\n    return defaults[key];\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'time-picker',\n  template: `\n    <div id=\"time-picker-wrapper\" class=\"{{config.theme}}\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\" (click)=\"Close($event);\">\n      <div id=\"time-picker\" [ngClass]=\"{'active': activeModal, 'static': !isPopup}\">\n        <div class=\"time-picker-header\">\n          <div class=\"time-picker-selected-time\">\n              <div class=\"time-picker-hour\" (click)=\"HourClick()\" [attr.disabled]=\"(config.onlyMinute) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'hour'}\">{{GetHour()}}</div>\n              <span class=\"time-seprator\">{{GetSeparator()}}</span>\n              <div class=\"time-picker-minute\" (click)=\"MinuteClick();\" [attr.disabled]=\"(config.onlyHour) ? 'disabled' : null\"\n                [ngClass]=\"{'selected' : clockType == 'minute'}\">{{GetMinute()}}</div>\n          </div>\n          <div class=\"time-picker-selected-ampm\">\n            <div class=\"time-picker-am\" (click)=\"SetAM();\" [attr.disabled]=\"(config.onlyPM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'AM'}\">{{GetPeriod('AM')}}</div>\n            <div class=\"time-picker-pm\" (click)=\"SetPM();\" [attr.disabled]=\"(config.onlyAM) ? 'disabled' : null\" [ngClass]=\"{'selected' : time.ampm == 'PM'}\">{{GetPeriod('PM')}}</div>\n\n          </div>\n        </div>\n        <div class=\"time-picker-content\">\n            <div class=\"time-picker-clock\" [ngClass]=\"{'hide-time-picker-clock': changeToMin}\"  (mousemove)=\"getDegree($event);\" (mousedown)=\"updateClockDown($event)\" (mouseup)=\"setTime();\">\n              <button *ngFor=\"let clock of clockObject\" [ngClass]=\"{'active' : nowTime == clock.time}\" \n                [id]=\"'timepicker-item-id-' + clock.time\" \n                [ngStyle]=\"{top: clock.top,left: clock.left, color: nowTime == clock.time ? config.arrowStyle.color :  '', background: nowTime == clock.time ? config.arrowStyle.background : 'transparent'}\">\n                {{GetClockTime(clock)}}\n              </button>\n              <div class=\"time-picker-clock-origin\" [ngStyle]=\"{ background: config.arrowStyle.background}\"></div>\n              <div id=\"tpc-arrow\" class=\"time-picker-clock-arrow\" [ngStyle]=\"getClockArrowStyle()\">\n                <span [ngStyle]=\"{ background: config.arrowStyle.background }\"></span>\n              </div>\n            </div>\n        </div>\n        <div class=\"time-picker-footer\">\n            <button (click)=\"Close($event);\">{{GetLabel('cancel')}}</button>\n            <button (click)=\"GetTime();Close($event);\" class=\"atp-ref-dialog-close\">{{GetLabel('ok')}}</button>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    #time-picker-wrapper {\n      position: fixed;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      right: 0;\n      background: transparent;\n      -webkit-transition: background 0.4s;\n      transition: background 0.4s;\n      font-family: 'Roboto', sans-serif;\n      z-index: 1000; }\n      #time-picker-wrapper.static {\n        position: relative !important;\n        background: transparent !important;\n        display: inline-block;\n        z-index: 0; }\n      #time-picker-wrapper.active {\n        background: rgba(0, 0, 0, 0.3); }\n      #time-picker-wrapper.dark #time-picker {\n        background: #424242; }\n        #time-picker-wrapper.dark #time-picker .time-picker-header {\n          border-bottom: none;\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #999; }\n            #time-picker-wrapper.dark #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-clock {\n          background: #555555; }\n          #time-picker-wrapper.dark #time-picker .time-picker-clock > button {\n            color: #fff; }\n        #time-picker-wrapper.dark #time-picker .time-picker-footer {\n          border-top: none; }\n          #time-picker-wrapper.dark #time-picker .time-picker-footer button {\n            background: #555555;\n            color: #fff; }\n            #time-picker-wrapper.dark #time-picker .time-picker-footer button:hover {\n              background: #777; }\n      #time-picker-wrapper.light #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.light #time-picker .time-picker-header {\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #000; }\n          #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: #aaa; }\n            #time-picker-wrapper.light #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #000; }\n        #time-picker-wrapper.light #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock > button.active {\n              background: blue;\n              color: #fff; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: blue; }\n          #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: blue; }\n            #time-picker-wrapper.light #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: blue; }\n        #time-picker-wrapper.light #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.light #time-picker .time-picker-footer button {\n            background: #f1f1f1; }\n            #time-picker-wrapper.light #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-green #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-header {\n          background-color: #00897b;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-green #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock > button.active {\n              background: #00897b;\n              color: #fff; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #00897b; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #00897b; }\n        #time-picker-wrapper.material-green #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-green #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #00897b; }\n            #time-picker-wrapper.material-green #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-blue #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-header {\n          background-color: #3F51B5;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock > button.active {\n              background: #3F51B5;\n              color: #fff; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #3F51B5; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #3F51B5; }\n        #time-picker-wrapper.material-blue #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-blue #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #3F51B5; }\n            #time-picker-wrapper.material-blue #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-red #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-header {\n          background-color: #F44336;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-red #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock > button.active {\n              background: #F44336;\n              color: #fff; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #F44336; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #F44336; }\n        #time-picker-wrapper.material-red #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-red #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #F44336; }\n            #time-picker-wrapper.material-red #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-purple #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-header {\n          background-color: #9C27B0;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock > button.active {\n              background: #9C27B0;\n              color: #fff; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #9C27B0; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #9C27B0; }\n        #time-picker-wrapper.material-purple #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-purple #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #9C27B0; }\n            #time-picker-wrapper.material-purple #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper.material-orange #time-picker {\n        background: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-header {\n          background-color: #FF9800;\n          border-bottom: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-time div.selected {\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm {\n            color: rgba(255, 255, 255, 0.4); }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-header .time-picker-selected-ampm div.selected {\n              color: #fff; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-clock {\n          background: #ededed; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button {\n            color: #000; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock > button.active {\n              background: #FF9800;\n              color: #fff; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-origin {\n            background: #FF9800; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow {\n            background: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-clock .time-picker-clock-arrow span {\n              background: #FF9800; }\n        #time-picker-wrapper.material-orange #time-picker .time-picker-footer {\n          border-top: 1px solid #e1e1e1; }\n          #time-picker-wrapper.material-orange #time-picker .time-picker-footer button {\n            font-weight: bold;\n            text-transform: uppercase;\n            background: transparent;\n            color: #FF9800; }\n            #time-picker-wrapper.material-orange #time-picker .time-picker-footer button:hover {\n              background: #ddd; }\n      #time-picker-wrapper #time-picker {\n        width: 325px;\n        height: auto;\n        -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n        border-radius: 2px;\n        margin: 15vh auto !important;\n        -webkit-transform: scale(0.5) !important;\n                transform: scale(0.5) !important;\n        -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: opacity 0.3s, -webkit-transform 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        opacity: 0; }\n        #time-picker-wrapper #time-picker.static {\n          margin: 0px !important;\n          -webkit-box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12);\n                  box-shadow: 0 11px 15px -7px rgba(0, 0, 0, 0.2), 0 0 7px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12); }\n        #time-picker-wrapper #time-picker.active {\n          -webkit-transform: scale(1) !important;\n                  transform: scale(1) !important;\n          opacity: 1; }\n        #time-picker-wrapper #time-picker .time-picker-header {\n          text-align: center;\n          padding: 15px 0px; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time {\n            font-size: 35px;\n            padding: 5px 0px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div {\n              display: inline-block;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-time div[disabled=true] {\n                cursor: default; }\n          #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm {\n            font-size: 18px; }\n            #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div {\n              display: inline-block;\n              padding: 0 5px;\n              cursor: pointer; }\n              #time-picker-wrapper #time-picker .time-picker-header .time-picker-selected-ampm div[disabled=true] {\n                cursor: default; }\n        #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock {\n          width: 200px;\n          height: 200px;\n          padding: 24px;\n          border-radius: 50%;\n          cursor: pointer;\n          margin: 25px auto;\n          position: relative;\n          user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n          -webkit-user-select: none;\n          opacity: 1;\n          -webkit-transform: scale(1);\n                  transform: scale(1);\n          -webkit-transition: opacity 0.3s, transform 0.3s;\n          -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: opacity 0.3s, -webkit-transform 0.3s;\n          transition: opacity 0.3s, transform 0.3s;\n          transition: opacity 0.3s, transform 0.3s, -webkit-transform 0.3s; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock button {\n            border: none;\n            position: absolute;\n            width: 35px;\n            height: 35px;\n            border-radius: 50%;\n            cursor: pointer;\n            font-size: 17px;\n            text-align: center;\n            padding: 0;\n            -webkit-transition: all .2s;\n            transition: all .2s;\n            z-index: 3; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-origin {\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            position: absolute;\n            left: 50%;\n            top: 50%;\n            margin-left: -3px;\n            margin-top: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow {\n            width: 2px;\n            height: 41%;\n            position: absolute;\n            left: 0;\n            top: 22px;\n            right: 0;\n            margin: auto;\n            -webkit-transform-origin: top left;\n            transform-origin: bottom; }\n            #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock .time-picker-clock-arrow span {\n              width: 8px;\n              height: 8px;\n              border-radius: 50%;\n              position: absolute;\n              top: 0;\n              right: -3px; }\n          #time-picker-wrapper #time-picker .time-picker-content .time-picker-clock.hide-time-picker-clock {\n            opacity: 0;\n            -webkit-transform: scale(0.8);\n                    transform: scale(0.8); }\n        #time-picker-wrapper #time-picker .time-picker-footer {\n          padding: 15px;\n          text-align: right; }\n          #time-picker-wrapper #time-picker .time-picker-footer button {\n            border: transparent;\n            margin-left: 10px;\n            padding: 10px;\n            font-size: 14px;\n            border-radius: 2px;\n            cursor: pointer; }\n\n    * {\n      outline: none;\n      -webkit-box-sizing: content-box;\n              box-sizing: content-box; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: AtpCoreService, },\n];\n}\n\nfunction TimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nTimePickerComponent.ctorParameters;\n/** @type {?} */\nTimePickerComponent.prototype._ref;\n/** @type {?} */\nTimePickerComponent.prototype.subject;\n/** @type {?} */\nTimePickerComponent.prototype.activeModal;\n/** @type {?} */\nTimePickerComponent.prototype.timerElement;\n/** @type {?} */\nTimePickerComponent.prototype.clockObject;\n/** @type {?} */\nTimePickerComponent.prototype.isClicked;\n/** @type {?} */\nTimePickerComponent.prototype.clockType;\n/** @type {?} */\nTimePickerComponent.prototype.time;\n/** @type {?} */\nTimePickerComponent.prototype.nowTime;\n/** @type {?} */\nTimePickerComponent.prototype.degree;\n/** @type {?} */\nTimePickerComponent.prototype.config;\n/** @type {?} */\nTimePickerComponent.prototype.appRef;\n/** @type {?} */\nTimePickerComponent.prototype.isPopup;\n/** @type {?} */\nTimePickerComponent.prototype.allowed;\n/** @type {?} */\nTimePickerComponent.prototype.preference;\n/** @type {?} */\nTimePickerComponent.prototype.changeToMin;\n/** @type {?} */\nTimePickerComponent.prototype.animationTime;\n/** @type {?} */\nTimePickerComponent.prototype.clockMaker;\n/** @type {?} */\nTimePickerComponent.prototype.setActiveTime;\n/** @type {?} */\nTimePickerComponent.prototype.setArrow;\n/** @type {?} */\nTimePickerComponent.prototype.rotationClass;\n/** @type {?} */\nTimePickerComponent.prototype.getDegree;\n/** @type {?} */\nTimePickerComponent.prototype.core;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          // HACK(benlesh): To resolve an issue where Node users may have multiple\n          // copies of rxjs in their node_modules directory.\n          if (isTrustedSubscriber(destinationOrNext)) {\n            const trustedSubscriber = destinationOrNext[rxSubscriberSymbol]() as Subscriber<any>;\n            this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n            this.destination = trustedSubscriber;\n            trustedSubscriber.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated internal use only */ _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n\nfunction isTrustedSubscriber(obj: any) {\n  return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  /** @deprecated internal use only */ public source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments it will return an Observable. If function `func`\n   * calls its callback with one argument the Observable will emit that value.\n   * If on the other hand the callback is called with multiple values the resulting\n   * Observable will emit an array with said values as arguments.\n   *\n   * It is very important to remember that input function `func` is not called\n   * when the output function is, but rather when the Observable returned by the output\n   * function is subscribed. This means if `func` makes an AJAX request, that request\n   * will be made every time someone subscribes to the resulting Observable, but not before.\n   *\n   * Optionally, a selector function can be passed to `bindObservable`. The selector function\n   * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n   * Even though by default multiple arguments passed to callback appear in the stream as an array\n   * the selector function will be called with arguments directly, just as the callback would.\n   * This means you can imagine the default selector (when one is not provided explicitly)\n   * as a function that aggregates all its arguments into an array, or simply returns first argument\n   * if there is only one.\n   *\n   * The last optional parameter - {@link Scheduler} - can be used to control when the call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n   * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n   * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n   * and call `subscribe` on the output Observable all function calls that are currently executing\n   * will end before `func` is invoked.\n   *\n   * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n   * In particular, if the callback is called synchronously the subscription of the resulting Observable\n   * will call the `next` function synchronously as well.  If you want to defer that call,\n   * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n   * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that the Observable created by the output function will always emit a single value\n   * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n   * calls will not appear in the stream. If you need to listen for multiple calls,\n   *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n   * will be the context that the output function has at call time. In particular, if `func`\n   * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n   * it is recommended that the context of the output function is set to that object as well.\n   *\n   * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions the same as any other and error parameters\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive an array of arguments passed to a callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with a selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on an object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func A function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps them to a value that is emitted on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      destination.syncErrorThrowable = true;\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;\nexport function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  return (source: Observable<T>) => source.lift.call(new ArrayObservable([source, ...observables]), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {PromiseLike<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: PromiseLike<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: PromiseLike<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise<T>(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, I|R> {\n  return function mergeMapOperatorFunction(source: Observable<T>) {\n    if (typeof resultSelector === 'number') {\n      concurrent = <number>resultSelector;\n      resultSelector = null;\n    }\n    return source.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n  };\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","\nimport { ObservableInput } from '../Observable';\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap(identity as (value: T, index: number) => ObservableInput<{}>, null, concurrent);\n}","\nimport { mergeAll } from './mergeAll';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): MonoTypeOperatorFunction<T> {\n  return mergeAll(1);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll()(of(...observables)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Joins last values emitted by passed Observables.\n   *\n   * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n   *\n   * <img src=\"./img/forkJoin.png\" width=\"100%\">\n   *\n   * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n   * or directly as arguments. If no input Observables are provided, resulting stream will complete\n   * immediately.\n   *\n   * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n   * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n   * array will have `n` values, where first value is the last thing emitted by the first Observable,\n   * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n   * not emit more than once and it will complete after that. If you need to emit combined values not only\n   * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n   * or {@link zip} instead.\n   *\n   * In order for resulting array to have the same length as the number of input Observables, whenever any of\n   * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n   * and it will not emit anything either, even if it already has some last values from other Observables.\n   * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n   * unless at any point some other Observable completes without emitting value, which brings us back to\n   * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n   * have to emit something at least once and complete.\n   *\n   * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n   * will be immediately unsubscribed.\n   *\n   * Optionally `forkJoin` accepts project function, that will be called with values which normally\n   * would land in emitted array. Whatever is returned by project function, will appear in output\n   * Observable instead. This means that default project can be thought of as a function that takes\n   * all its arguments and puts them into an array. Note that project function will be called only\n   * when output Observable is supposed to emit a result.\n   *\n   * @example <caption>Use forkJoin with operator emitting immediately</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.of(1, 2, 3, 4),\n   *   Rx.Observable.of(5, 6, 7, 8)\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [4, 8]\n   * // \"This is how it ends!\"\n   *\n   *\n   * @example <caption>Use forkJoin with operator emitting after some time</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // [2, 3] after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   *\n   * @example <caption>Use forkJoin with project function</caption>\n   * const observable = Rx.Observable.forkJoin(\n   *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n   *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n   *   (n, m) => n + m\n   * );\n   * observable.subscribe(\n   *   value => console.log(value),\n   *   err => {},\n   *   () => console.log('This is how it ends!')\n   * );\n   *\n   * // Logs:\n   * // 5 after 3 seconds\n   * // \"This is how it ends!\" immediately after\n   *\n   * @see {@link combineLatest}\n   * @see {@link zip}\n   *\n   * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n   * passed directly to the operator.\n   * @param {function} [project] Function that takes values emitted by input Observables and returns value\n   * that will appear in resulting Observable instead of default array.\n   * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n   * or value from project function.\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}\n","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: NodeEventHandler) => void;\n  removeListener: (eventName: string, handler: NodeEventHandler) => void;\n};\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * `fromEvent` accepts as a first argument event target, which is an object with methods\n   * for registering event handler functions. As a second argument it takes string that indicates\n   * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n   * which are described in detail below. If your event target does not match any of the ones listed,\n   * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n   * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n   * handler functions have different names, but they all accept a string describing event type\n   * and function itself, which will be called whenever said event happens.\n   *\n   * Every time resulting Observable is subscribed, event handler function will be registered\n   * to event target on given event type. When that event fires, value\n   * passed as a first argument to registered function will be emitted by output Observable.\n   * When Observable is unsubscribed, function will be unregistered from event target.\n   *\n   * Note that if event target calls registered function with more than one argument, second\n   * and following arguments will not appear in resulting stream. In order to get access to them,\n   * you can pass to `fromEvent` optional project function, which will be called with all arguments\n   * passed to event handler. Output Observable will then emit value returned by project function,\n   * instead of the usual value.\n   *\n   * Remember that event targets listed below are checked via duck typing. It means that\n   * no matter what kind of object you have and no matter what environment you work in,\n   * you can safely use `fromEvent` on that object if it exposes described methods (provided\n   * of course they behave as was described above). So for example if Node.js library exposes\n   * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n   * a good choice.\n   *\n   * If the API you use is more callback then event handler oriented (subscribed\n   * callback function fires only once and thus there is no need to manually\n   * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n   * instead.\n   *\n   * `fromEvent` supports following types of event targets:\n   *\n   * **DOM EventTarget**\n   *\n   * This is an object with `addEventListener` and `removeEventListener` methods.\n   *\n   * In the browser, `addEventListener` accepts - apart from event type string and event\n   * handler function arguments - optional third parameter, which is either an object or boolean,\n   * both used for additional configuration how and when passed function will be called. When\n   * `fromEvent` is used with event target of that type, you can provide this values\n   * as third parameter as well.\n   *\n   * **Node.js EventEmitter**\n   *\n   * An object with `addListener` and `removeListener` methods.\n   *\n   * **JQuery-style event target**\n   *\n   * An object with `on` and `off` methods\n   *\n   * **DOM NodeList**\n   *\n   * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n   *\n   * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n   * it contains and install event handler function in every of them. When returned Observable\n   * is unsubscribed, function will be removed from all Nodes.\n   *\n   * **DOM HtmlCollection**\n   *\n   * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n   * installed and removed in each of elements.\n   *\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console every time a click\n   * // occurs on the document.\n   *\n   *\n   * @example <caption>Use addEventListener with capture option</caption>\n   * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n   *                                                                          // which will be passed to addEventListener\n   * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n   *\n   * clicksInDocument.subscribe(() => console.log('document'));\n   * clicksInDiv.subscribe(() => console.log('div'));\n   *\n   * // By default events bubble UP in DOM tree, so normally\n   * // when we would click on div in document\n   * // \"div\" would be logged first and then \"document\".\n   * // Since we specified optional `capture` option, document\n   * // will catch event when it goes DOWN DOM tree, so console\n   * // will log \"document\" and then \"div\".\n   *\n   * @see {@link bindCallback}\n   * @see {@link bindNodeCallback}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOM EventTarget, Node.js\n   * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions | SelectorMethodSignature<T>,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options as EventListenerOptions | undefined);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler, <boolean>options);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler as NodeEventHandler);\n      unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}\n","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector as ResultFunc<S, T>,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector as ResultFunc<S, T>,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { GenerateObservable } from './GenerateObservable';\n\nexport const generate = GenerateObservable.create;\n","import { Observable } from '../../Observable';\nimport { generate as staticGenerate } from '../../observable/generate';\n\nObservable.generate = staticGenerate;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof staticGenerate;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n  protected work: (this: this, state?: T) => void;\n\n  constructor(protected scheduler: AsyncScheduler,\n              work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n    this.work = work;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll(concurrent)(new ArrayObservable(<any>observables, scheduler)) as Observable<R>;\n}\n","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { race as staticRace } from '../../observable/race';\n\nObservable.race = staticRace;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof staticRace;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please note\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(v: ObservableInput<R>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, R> ;\nexport function onErrorResumeNext<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function onErrorResumeNext<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return (source: Observable<T>) => source.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { onErrorResumeNextStatic } from '../operators/onErrorResumeNext';\n\nexport const onErrorResumeNext = onErrorResumeNextStatic;\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext as staticOnErrorResumeNext } from '../../observable/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = staticOnErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof staticOnErrorResumeNext;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}\r\n","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    subscriber.syncErrorThrowable = true;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;\nexport function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;\nexport function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return function zipOperatorFunction(source: Observable<T>) {\n    return source.lift.call(zipStatic<R>(source, ...observables));\n  };\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import {  zipStatic  } from '../operators/zip';\n\nexport const zip = zipStatic;\n","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { map } from '../../operators/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nconst mapResponse = map((x: AjaxResponse, index: number) => x.response);\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return mapResponse(\n    new AjaxObservable<AjaxResponse>({\n      method: 'GET',\n      url,\n      responseType: 'json',\n      headers\n    })\n  );\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      if (async) {\n        xhr.timeout = request.timeout;\n        xhr.responseType = request.responseType as any;\n      }\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n    this.response = parseXhrResponse(this.responseType, xhr);\n  }\n}\n\nfunction parseXhrResponse(responseType: string, xhr: XMLHttpRequest) {\n  switch (responseType) {\n    case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return JSON.parse((xhr as any).responseText || 'null');\n        }\n      case 'xml':\n        return xhr.responseXML;\n      case 'text':\n      default:\n          // HACK(benlesh): TypeScript shennanigans\n          // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n          return  ('response' in xhr) ? xhr.response : (xhr as any).responseText;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return function bufferOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferOperator<T>(closingNotifier));\n  };\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { buffer as higherOrder } from '../operators/buffer';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return higherOrder(closingNotifier)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number = null): OperatorFunction<T, T[]> {\n  return function bufferCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n  };\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferCount as higherOrder } from '../operators/bufferCount';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return higherOrder(bufferSize, startBufferEvery)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(bufferTimeSpan: number): OperatorFunction<T, T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { bufferTime as higherOrder } from '../operators/bufferTime';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return higherOrder(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(\n  openings: SubscribableOrPromise<O>,\n  closingSelector: (value: O) => SubscribableOrPromise<any>\n): OperatorFunction<T, T[]> {\n  return function bufferToggleOperatorFunction(source: Observable<T>) {\n    return source.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { bufferToggle as higherOrder } from '../operators/bufferToggle';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return higherOrder(openings, closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, T[]> {\n  return function (source: Observable<T>) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { bufferWhen as higherOrder } from '../operators/bufferWhen';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return higherOrder(closingSelector)(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nexport function catchError<T, R>(selector: (err: any, caught: Observable<T>) => ObservableInput<R>): OperatorFunction<T, T | R> {\n  return function catchErrorOperatorFunction(source: Observable<T>): Observable<T | R> {\n    const operator = new CatchOperator(selector);\n    const caught = source.lift(operator);\n    return (operator.caught = caught as Observable<T>);\n  };\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { catchError as higherOrder } from '../operators/catchError';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  return higherOrder(selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from '../operators/combineLatest';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function combineAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../Observable';\nimport { combineAll as higherOrder } from '../operators/combineAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { combineLatest as higherOrder } from '../operators/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { concat as concatStatic } from '../observable/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: Array<ObservableInput<T> | IScheduler>): MonoTypeOperatorFunction<T>;\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { concat as higherOrder } from '../operators/concat';\n\nexport { concat as concatStatic } from '../observable/concat';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { concatAll as higherOrder } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { mergeMap } from './mergeMap';\nimport { ObservableInput } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(project: (value: T, index: number) =>  ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return mergeMap(project, resultSelector, 1);\n}\n","import { concatMap as higherOrderConcatMap } from '../operators/concatMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return higherOrderConcatMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { concatMap } from './concatMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(\n  innerObservable: Observable<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R> {\n  return concatMap(() => innerObservable, resultSelector);\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { concatMapTo as higherOrder } from '../operators/concatMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { count as higherOrder } from '../operators/count';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(): OperatorFunction<Notification<T>, T> {\n  return function dematerializeOperatorFunction(source: Observable<Notification<T>>) {\n    return source.lift(new DeMaterializeOperator());\n  };\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { dematerialize as higherOrder } from '../operators/dematerialize';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<Notification<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(durationSelector: (value: T) => SubscribableOrPromise<number>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { debounce as higherOrder } from '../operators/debounce';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(dueTime: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { debounceTime as higherOrder } from '../operators/debounceTime';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(dueTime, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(defaultValue?: T): MonoTypeOperatorFunction<T>;\nexport function defaultIfEmpty<T, R>(defaultValue?: R): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R = null): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new DefaultIfEmptyOperator(defaultValue)) as Observable<T | R>;\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}","\nimport { Observable } from '../Observable';\nimport { defaultIfEmpty as higherOrder } from '../operators/defaultIfEmpty';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return higherOrder<T, R>(defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(delay: number|Date,\n                         scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return (source: Observable<T>) => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { delay as higherOrder } from '../operators/delay';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  return higherOrder<T>(delay, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    return (source: Observable<T>) =>\n      new SubscriptionDelayObservable(source, subscriptionDelay)\n        .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return (source: Observable<T>) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(/** @deprecated internal use only */ public source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { delayWhen as higherOrder } from '../operators/delayWhen';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  return higherOrder(delayDurationSelector, subscriptionDelay)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../Observable';\nimport { distinct as higherOrder } from '../operators/distinct';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return higherOrder(keySelector, flushes)(this);\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T>;\nexport function distinctUntilChanged<T, K>(compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilChanged as higherOrder } from '../operators/distinctUntilChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return higherOrder(compare, keySelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: string): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K>(key: string, compare: (x: K, y: K) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(key: string, compare?: (x: T, y: T) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","\nimport { Observable } from '../Observable';\nimport { distinctUntilKeyChanged as higherOrder } from '../operators/distinctUntilKeyChanged';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return higherOrder<T, T>(key, compare)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function tap<T>(next: (x: T) => void, error?: (e: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;\nexport function tap<T>(observer: PartialObserver<T>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap<T>(nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): MonoTypeOperatorFunction<T> {\n  return function tapOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new DoOperator(nextOrObserver, error, complete));\n  };\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { tap as higherOrder } from '../operators/tap';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return higherOrder(<any>nextOrObserver, error, complete)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { exhaust as higherOrder } from '../operators/exhaust';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n  ): OperatorFunction<T, R> {\n    return (source: Observable<T>) => source.lift(new SwitchFirstMapOperator(project, resultSelector));\n  }\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable, ObservableInput } from '../Observable';\nimport { exhaustMap as higherOrder } from '../operators/exhaustMap';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return higherOrder(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): OperatorFunction<T, R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return (source: Observable<T>) => source.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { expand as higherOrder } from '../operators/expand';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return higherOrder(project, concurrent, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(index: number, defaultValue?: T): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { elementAt as higherOrder } from '../operators/elementAt';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return higherOrder(index, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): OperatorFunction<T, S>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): MonoTypeOperatorFunction<T> {\n  return function filterOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new FilterOperator(predicate, thisArg));\n  };\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}","\nimport { Observable } from '../Observable';\nimport { filter as higherOrderFilter } from '../operators/filter';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return higherOrderFilter(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { finalize } from '../operators/finalize';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return finalize(callback)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\nexport function find<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T, S extends T>(predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): OperatorFunction<T, S>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\nexport function find<T>(predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): MonoTypeOperatorFunction<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { find as higherOrder } from '../operators/find';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { FindValueOperator } from '../operators/find';\nimport { OperatorFunction } from '../interfaces';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): OperatorFunction<T, number> {\n  return (source: Observable<T>) => source.lift(new FindValueOperator(predicate, source, true, thisArg)) as Observable<any>;\n}\n","import { Observable } from '../Observable';\nimport { findIndex as higherOrder } from '../operators/findIndex';\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function first<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): OperatorFunction<T, S>;\nexport function first<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function first<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): OperatorFunction<T, R>;\nexport function first<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { first as higherOrder } from '../operators/first';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { groupBy as higherOrder, GroupedObservable } from '../operators/groupBy';\nexport { GroupedObservable };\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return higherOrder(keySelector, elementSelector as any, durationSelector, subjectSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(): MonoTypeOperatorFunction<T> {\n  return function ignoreElementsOperatorFunction(source: Observable<T>) {\n    return source.lift(new IgnoreElementsOperator());\n  };\n}\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","import { Observable } from '../Observable';\nimport { ignoreElements as higherOrder } from '../operators/ignoreElements';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { isEmpty as higherOrder } from '../operators/isEmpty';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return higherOrder()(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(durationSelector: (value: T) => SubscribableOrPromise<any>): MonoTypeOperatorFunction<T> {\n  return function auditOperatorFunction(source: Observable<T>) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        const innerSubscription = subscribeToResult(this, duration);\n        if (innerSubscription.closed) {\n          this.clearThrottle();\n        } else {\n          this.add(this.throttled = innerSubscription);\n        }\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { audit as higherOrder } from '../operators/audit';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return higherOrder(durationSelector)(this);\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(duration: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { auditTime as higherOrder } from '../operators/auditTime';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(duration, scheduler)(this) as Observable<T>;\n}","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S): OperatorFunction<T, S>;\nexport function last<T, S extends T, R>(predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T, S extends T>(predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): OperatorFunction<T, S>;\nexport function last<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\nexport function last<T, R>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): OperatorFunction<T, R>;\nexport function last<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => source.lift(new LastOperator(predicate, resultSelector, defaultValue, source));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { last as higherOrder } from '../operators/last';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return higherOrder(predicate, resultSelector as any, defaultValue)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { every as higherOrder } from '../operators/every';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return higherOrder(predicate, thisArg)(this);\n}","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","import { map as higherOrderMap } from '../operators/map';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  return higherOrderMap(project, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}","import { Observable } from '../Observable';\nimport { mapTo as higherOrder } from '../operators/mapTo';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T>> {\n  return function materializeOperatorFunction(source: Observable<T>) {\n    return source.lift(new MaterializeOperator());\n  };\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { materialize as higherOrder } from '../operators/materialize';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return higherOrder()(this) as Observable<Notification<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function scan<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): OperatorFunction<T, T[]>;\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): OperatorFunction<T, R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source: Observable<T>): Observable<R> {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return function takeLastOperatorFunction(source: Observable<T>): Observable<T> {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { pipe } from '../util/pipe';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(accumulator: (acc: T, value: T, index: number) => T, seed?: T): MonoTypeOperatorFunction<T>;\nexport function reduce<T>(accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): OperatorFunction<T, T[]>;\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index: number) => R, seed?: R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(accumulator: (acc: R, value: T, index?: number) => R, seed?: R): OperatorFunction<T, R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source: Observable<T>): Observable<R> {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n  return function reduceOperatorFunction(source: Observable<T>): Observable<R> {\n    return pipe(scan<T, T | R>((acc, value, index) => {\n      return accumulator(<R>acc, value, index + 1);\n    }), takeLast(1))(source) as Observable<R>;\n  };\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n\n  return reduce(max);\n}\n","import { Observable } from '../Observable';\nimport { max as higherOrderMax } from '../operators/max';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMax(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\nimport { merge as mergeStatic } from '../observable/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T>(concurrent?: number, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: Array<ObservableInput<T> | IScheduler | number>): MonoTypeOperatorFunction<T>;\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { merge as higherOrder } from '../operators/merge';\n\nexport { merge as mergeStatic } from '../observable/merge';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return higherOrder(...observables)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { mergeAll as higherOrder } from '../operators/mergeAll';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): Observable<T> {\n  return higherOrder(concurrent)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMap as higherOrderMergeMap } from '../operators/mergeMap';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  return higherOrderMergeMap(project, <any>resultSelector, concurrent)(this) as Observable<I | R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(observable: ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\nexport function mergeMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { mergeMapTo as higherOrder } from '../operators/mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(innerObservable, resultSelector as any, concurrent)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { mergeScan as higherOrder } from '../operators/mergeScan';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return higherOrder(accumulator, seed, concurrent)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return reduce(min);\n}\n","import { Observable } from '../Observable';\nimport { min as higherOrderMin } from '../operators/min';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  return higherOrderMin(comparer)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  /** @deprecated internal use only */ public _subject: Subject<T>;\n  /** @deprecated internal use only */ public _refCount: number = 0;\n  /** @deprecated internal use only */ public _connection: Subscription;\n  _isComplete = false;\n\n  constructor(/** @deprecated internal use only */ public source: Observable<T>,\n              /** @deprecated internal use only */ public subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  /** @deprecated internal use only */ public getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  /** @deprecated internal use only */ _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): OperatorFunction<T, R> {\n  return function multicastOperatorFunction(source: Observable<T>): Observable<R> {\n    let subjectFactory: () => Subject<T>;\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return <Subject<T>>subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    const connectable: any = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n\n    return <ConnectableObservable<R>> connectable;\n  };\n}\n\nexport class MulticastOperator<T, R> implements Operator<T, R> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<R>) {\n  }\n  call(subscriber: Subscriber<R>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { multicast as higherOrder } from '../operators/multicast';\nimport { FactoryOrValue, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: FactoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: MonoTypeOperatorFunction<T>): Observable<T>;\nexport function multicast<T, R>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T, R>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                                selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(<any>subjectOrSubjectFactory, selector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { observeOn as higherOrder } from '../operators/observeOn';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { onErrorResumeNext as higherOrder } from '../operators/onErrorResumeNext';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\n\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...nextSources)(this);\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return (source: Observable<T>) => source.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","import { Observable } from '../Observable';\nimport { pairwise as higherOrder } from '../operators/pairwise';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return higherOrder()(this) as Observable<[T, T]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(predicate: (value: T, index: number) => boolean,\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) => [\n    filter(predicate, thisArg)(source),\n    filter(not(predicate, thisArg) as any)(source)\n  ] as [Observable<T>, Observable<T>];\n}\n","import { Observable } from '../Observable';\nimport { partition as higherOrder } from '../operators/partition';\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return higherOrder(predicate, thisArg)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(...properties: string[]): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return (source: Observable<T>) => map(plucker(properties, length))(source as any);\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","import { Observable } from '../Observable';\nimport { pluck as higherOrder } from '../operators/pluck';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  return higherOrder(...properties)(this) as Observable<R>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publish<T>(selector: MonoTypeOperatorFunction<T>): MonoTypeOperatorFunction<T>;\nexport function publish<T, R>(selector: OperatorFunction<T, R>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ?\n    multicast(() => new Subject<T>(), selector) :\n    multicast(new Subject<T>());\n}\n","\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publish as higherOrder } from '../operators/publish';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: (source: Observable<T>) => Observable<T>): Observable<T>;\nexport function publish<T, R>(this: Observable<T>, selector: (source: Observable<T>) => Observable<R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T, R>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<R>): Observable<R> | ConnectableObservable<R> {\n  return higherOrder(selector)(this);\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(value: T):  UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new BehaviorSubject<T>(value))(source) as ConnectableObservable<T>;\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishBehavior as higherOrder } from '../operators/publishBehavior';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return higherOrder(value)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction, MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\nexport function publishReplay<T>(bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function publishReplay<T, R>(bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>, scheduler?: IScheduler): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\nexport function publishReplay<T, R>(bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): UnaryFunction<Observable<T>, ConnectableObservable<R> | Observable<R>> {\n\n  if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n    scheduler = selectorOrScheduler;\n  }\n\n  const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n  const subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n\n  return (source: Observable<T>) => multicast(() => subject, selector)(source) as Observable<R> | ConnectableObservable<R>;\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishReplay as higherOrder } from '../operators/publishReplay';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler): ConnectableObservable<T>;\nexport function publishReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: MonoTypeOperatorFunction<T>, scheduler?: IScheduler): Observable<T>;\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number, windowTime?: number, selector?: OperatorFunction<T, R>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T, R>(this: Observable<T>, bufferSize?: number,\n                                    windowTime?: number,\n                                    selectorOrScheduler?: IScheduler | OperatorFunction<T, R>,\n                                    scheduler?: IScheduler): Observable<R> | ConnectableObservable<R> {\n\n  return higherOrder<T, R>(bufferSize, windowTime, selectorOrScheduler as any, scheduler)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../interfaces';\n\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  return (source: Observable<T>) => multicast(new AsyncSubject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { publishLast as higherOrder } from '../operators/publishLast';\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  //TODO(benlesh): correct type-flow through here.\n  return higherOrder()(this) as ConnectableObservable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { MonoTypeOperatorFunction, OperatorFunction } from '../interfaces';\nimport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;\nexport function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\n  return function raceOperatorFunction(source: Observable<T>) {\n    // if the only argument is an array, it was most likely called with\n    // `pair([obs1, obs2, ...])`\n    if (observables.length === 1 && isArray(observables[0])) {\n      observables = <Array<Observable<T>>>observables[0];\n    }\n\n    return source.lift.call(raceStatic<T>(source, ...observables));\n  };\n}","import { Observable } from '../Observable';\nimport { race as higherOrder } from '../operators/race';\n\n// NOTE: to support backwards compatability with 5.4.* and lower\nexport { race as raceStatic } from '../observable/race';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, observables: Array<Observable<T>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, observables: Array<Observable<T>>): Observable<R>;\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { reduce as higherOrderReduce } from '../operators/reduce';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    return higherOrderReduce(accumulator, seed)(this);\n  }\n\n  return higherOrderReduce(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else if (count < 0) {\n      return source.lift(new RepeatOperator(-1, source));\n    } else {\n      return source.lift(new RepeatOperator(count - 1, source));\n    }\n  };\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { repeat as higherOrder } from '../operators/repeat';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  /** @deprecated internal use only */ _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","import { Observable } from '../Observable';\nimport { repeatWhen as higherOrder } from '../operators/repeatWhen';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(count: number = -1): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryOperator(count, source));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { retry as higherOrder } from '../operators/retry';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              public source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","import { Observable } from '../Observable';\nimport { retryWhen as higherOrder } from '../operators/retryWhen';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { sample as higherOrder } from '../operators/sample';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(period: number, scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { sampleTime as higherOrder } from '../operators/sampleTime';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(period, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { scan as higherOrderScan } from '../operators/scan';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  if (arguments.length >= 2) {\n    return higherOrderScan(accumulator, seed)(this) as Observable<R>;\n  }\n  return higherOrderScan(accumulator)(this);\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): OperatorFunction<T, boolean> {\n  return (source: Observable<T>) => source.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { sequenceEqual as higherOrder } from '../operators/sequenceEqual';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return higherOrder(compareTo, comparor)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => refCount()(multicast(shareSubjectFactory)(source)) as Observable<T>;\n};\n","import { Observable } from '../Observable';\nimport { share as higherOrder } from '../operators/share';\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler ): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(shareReplayOperator(bufferSize, windowTime, scheduler));\n}\n\nfunction shareReplayOperator<T>(bufferSize?: number, windowTime?: number, scheduler?: IScheduler) {\n  let subject: ReplaySubject<T>;\n  let refCount = 0;\n  let subscription: Subscription;\n  let hasError = false;\n  let isComplete = false;\n\n  return function shareReplayOperation(this: Subscriber<T>, source: Observable<T>) {\n    refCount++;\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject<T>(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next(value) { subject.next(value); },\n        error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete() {\n          isComplete = true;\n          subject.complete();\n        },\n      });\n    }\n\n    const innerSub = subject.subscribe(this);\n\n    return () => {\n      refCount--;\n      innerSub.unsubscribe();\n      if (subscription && refCount === 0 && isComplete) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { shareReplay as higherOrder } from '../operators/shareReplay';\n\n/**\n * @method shareReplay\n * @owner Observable\n */\nexport function shareReplay<T>(this: Observable<T>, bufferSize?: number, windowTime?: number, scheduler?: IScheduler):\n  Observable<T> {\n  return higherOrder(bufferSize, windowTime, scheduler)(this) as Observable<T>;\n};","\nimport { Observable } from '../../Observable';\nimport { shareReplay } from '../../operator/shareReplay';\n\nObservable.prototype.shareReplay = shareReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    shareReplay: typeof shareReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SingleOperator(predicate, source));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { single as higherOrder } from '../operators/single';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skip as higherOrder } from '../operators/skip';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator<T> implements Operator<T, T> {\n  constructor(private _skipCount: number) {\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    if (this._skipCount === 0) {\n      // If we don't want to skip any values then just subscribe\n      // to Subscriber without any further logic.\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipLastSubscriber<T> extends Subscriber<T> {\n  private _ring: T[];\n  private _count: number = 0;\n\n  constructor(destination: Subscriber<T>, private _skipCount: number) {\n    super(destination);\n    this._ring = new Array<T>(_skipCount);\n  }\n\n  protected _next(value: T): void {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { skipLast as higherOrder } from '../operators/skipLast';\n\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { skipLast } from '../../operator/skipLast';\n\nObservable.prototype.skipLast = skipLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipLast: typeof skipLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipUntil as higherOrder } from '../operators/skipUntil';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { skipWhile as higherOrder } from '../operators/skipWhile';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(v1: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(...array: Array<T | IScheduler>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len === 1) {\n      return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), source);\n    } else if (len > 1) {\n      return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), source);\n    } else {\n      return concatStatic(new EmptyObservable<T>(scheduler), source);\n    }\n  };\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { startWith as higherOrder } from '../operators/startWith';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  return higherOrder(...array)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(scheduler: IScheduler, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function subscribeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new SubscribeOnOperator<T>(scheduler, delay));\n  };\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn as higherOrder } from '../operators/subscribeOn';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return higherOrder(scheduler, delay)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, I | R> {\n  return function switchMapOperatorFunction(source: Observable<T>): Observable<I | R> {\n    return source.lift(new SwitchMapOperator(project, resultSelector));\n  };\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { OperatorFunction } from '../interfaces';\nimport { Observable } from '../Observable';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\nexport function switchAll<T>(): OperatorFunction<Observable<T>, T> {\n  return switchMap(identity);\n}\n","import { Observable } from '../Observable';\nimport { switchAll as higherOrder } from '../operators/switchAll';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<Observable<T>>): Observable<T> {\n  return higherOrder()(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","\nimport { Observable, ObservableInput } from '../Observable';\nimport { switchMap as higherOrderSwitchMap } from '../operators/switchMap';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return higherOrderSwitchMap(project, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(observable: ObservableInput<R>): OperatorFunction<T, R>;\nexport function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): OperatorFunction<T, I | R> {\n  return (source: Observable<T>) => source.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { switchMapTo as higherOrder } from '../operators/switchMapTo';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return higherOrder(innerObservable, resultSelector)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => {\n    if (count === 0) {\n      return new EmptyObservable<T>();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { take as higherOrder } from '../operators/take';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrder(count)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","\nimport { Observable } from '../Observable';\nimport { takeLast as higherOrderTakeLast } from '../operators/takeLast';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  return higherOrderTakeLast(count)(this) as Observable<T>;\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeUntil as higherOrder } from '../operators/takeUntil';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return higherOrder(notifier)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { takeWhile as higherOrder } from '../operators/takeWhile';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return higherOrder(predicate)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n  private _trailingValue: T;\n  private _hasTrailingValue = false;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>,\n              private _leading: boolean,\n              private _trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.throttled) {\n      if (this._trailing) {\n        this._hasTrailingValue = true;\n        this._trailingValue = value;\n      }\n    } else {\n      const duration = this.tryDurationSelector(value);\n      if (duration) {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n      if (this._leading) {\n        this.destination.next(value);\n        if (this._trailing) {\n          this._hasTrailingValue = true;\n          this._trailingValue = value;\n        }\n      }\n    }\n  }\n\n  private tryDurationSelector(value: T): SubscribableOrPromise<any> {\n    try {\n      return this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return null;\n    }\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { throttled, _trailingValue, _hasTrailingValue, _trailing } = this;\n\n    this._trailingValue = null;\n    this._hasTrailingValue = false;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  private _sendTrailing() {\n    const { destination, throttled, _trailing, _trailingValue, _hasTrailingValue } = this;\n    if (throttled && _trailing && _hasTrailingValue) {\n      destination.next(_trailingValue);\n      this._trailingValue = null;\n      this._hasTrailingValue = false;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._sendTrailing();\n    this._unsubscribe();\n  }\n}\n","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { throttle as higherOrder, ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>,\n                            durationSelector: (value: T) => SubscribableOrPromise<number>,\n                            config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(durationSelector, config)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { ThrottleConfig, defaultThrottleConfig } from './throttle';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(\n      new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing)\n    );\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n  private _hasTrailingValue: boolean = false;\n  private _trailingValue: T = null;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler,\n              private leading: boolean,\n              private trailing: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { ThrottleConfig, defaultThrottleConfig } from '../operators/throttle';\nimport { throttleTime as higherOrder } from '../operators/throttleTime';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>,\n                                duration: number,\n                                scheduler: IScheduler = async,\n                                config: ThrottleConfig = defaultThrottleConfig): Observable<T> {\n  return higherOrder(duration, scheduler, config)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\n\nexport function timeInterval<T>(scheduler: IScheduler = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) => source.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timeInterval as higherOrder, TimeInterval } from '../operators/timeInterval';\nexport {TimeInterval};\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return higherOrder(scheduler)(this) as Observable<TimeInterval<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\nimport { MonoTypeOperatorFunction } from '../interfaces';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(due: number | Date,\n                           scheduler: IScheduler = async): MonoTypeOperatorFunction<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return (source: Observable<T>) => source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","import { async } from '../scheduler/async';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { timeout as higherOrder } from '../operators/timeout';\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  return higherOrder(due, scheduler)(this) as Observable<T>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction, MonoTypeOperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): MonoTypeOperatorFunction<T>;\nexport function timeoutWith<T, R>(due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): OperatorFunction<T, T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): OperatorFunction<T, T | R> {\n  return (source: Observable<T>) => {\n    let absoluteTimeout = isDate(due);\n    let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n    return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n  };\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable, ObservableInput } from '../Observable';\nimport { timeoutWith as higherOrder } from '../operators/timeoutWith';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  return higherOrder(due, withObservable, scheduler)(this as any);\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { OperatorFunction } from '../interfaces';\nimport { map } from './map';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(scheduler: IScheduler = async): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => new Timestamp(value, scheduler.now()));\n  // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { timestamp as higherOrder } from '../operators/timestamp';\nimport { Timestamp } from '../operators/timestamp';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return higherOrder(scheduler)(this) as Observable<Timestamp<T>>;\n}\n","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { reduce } from './reduce';\nimport { OperatorFunction } from '../interfaces';\n\nfunction toArrayReducer<T>(arr: T[], item: T, index: number) {\n  if (index === 0) {\n    return [item];\n  }\n  arr.push(item);\n  return arr;\n}\n\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  return reduce(toArrayReducer, []) as OperatorFunction<T, T[]>;\n}\n","\nimport { Observable } from '../Observable';\nimport { toArray as higherOrder } from '../operators/toArray';\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return higherOrder()(this) as Observable<T[]>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","// HACK: does nothing, because `toPromise` now lives on the `Observable` itself.\n// leaving this module here to prevent breakage.\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\nimport { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { Operator } from '../Operator';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { window as higherOrder } from '../operators/window';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return higherOrder(windowBoundaries)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(windowSize: number,\n                               startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  return function windowCountOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n  };\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowCount as higherOrder } from '../operators/windowCount';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return higherOrder(windowSize, startWindowEvery)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(windowTimeSpan: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): OperatorFunction<T, Observable<T>>;\n\nexport function windowTime<T>(windowTimeSpan: number): OperatorFunction<T, Observable<T>> {\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return function windowTimeOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n  };\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","import { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { windowTime as higherOrder } from '../operators/windowTime';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return higherOrder(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return (source: Observable<T>) => source.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  /** @deprecated internal use only */ _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowToggle as higherOrder } from '../operators/windowToggle';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(openings, closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(closingSelector: () => Observable<any>): OperatorFunction<T, Observable<T>> {\n  return function windowWhenOperatorFunction(source: Observable<T>) {\n    return source.lift(new WindowOperator<T>(closingSelector));\n  };\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../Observable';\nimport { windowWhen as higherOrder } from '../operators/windowWhen';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return higherOrder(closingSelector)(this) as Observable<Observable<T>>;\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OperatorFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;\nexport function withLatestFrom<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;\nexport function withLatestFrom<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[]): OperatorFunction<T, R>;\nexport function withLatestFrom<T, R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    let project: any;\n    if (typeof args[args.length - 1] === 'function') {\n      project = args.pop();\n    }\n    const observables = <Observable<any>[]>args;\n    return source.lift(new WithLatestFromOperator(observables, project));\n  };\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { withLatestFrom as higherOrder } from '../operators/withLatestFrom';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...args)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { zip as higherOrder } from '../operators/zip';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T>(this: Observable<T>, ...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return higherOrder(...observables)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../interfaces';\n\nexport function zipAll<T, R>(project?: (...values: Array<any>) => R): OperatorFunction<T, R> {\n  return (source: Observable<T>) => source.lift(new ZipOperator(project));\n}\n","import { Observable } from '../Observable';\nimport { zipAll as higherOrder } from '../operators/zipAll';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return higherOrder(project)(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  /** @deprecated internal use only */ _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","export { audit } from './operators/audit';\nexport { auditTime } from './operators/auditTime';\nexport { buffer } from './operators/buffer';\nexport { bufferCount } from './operators/bufferCount';\nexport { bufferTime } from './operators/bufferTime';\nexport { bufferToggle } from './operators/bufferToggle';\nexport { bufferWhen } from './operators/bufferWhen';\nexport { catchError } from './operators/catchError';\nexport { combineAll } from './operators/combineAll';\nexport { combineLatest } from './operators/combineLatest';\nexport { concat } from './operators/concat';\nexport { concatAll } from './operators/concatAll';\nexport { concatMap } from './operators/concatMap';\nexport { concatMapTo } from './operators/concatMapTo';\nexport { count } from './operators/count';\nexport { debounce } from './operators/debounce';\nexport { debounceTime } from './operators/debounceTime';\nexport { defaultIfEmpty } from './operators/defaultIfEmpty';\nexport { delay } from './operators/delay';\nexport { delayWhen } from './operators/delayWhen';\nexport { dematerialize } from './operators/dematerialize';\nexport { distinct } from './operators/distinct';\nexport { distinctUntilChanged } from './operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from './operators/distinctUntilKeyChanged';\nexport { elementAt } from './operators/elementAt';\nexport { every } from './operators/every';\nexport { exhaust } from './operators/exhaust';\nexport { exhaustMap } from './operators/exhaustMap';\nexport { expand } from './operators/expand';\nexport { filter } from './operators/filter';\nexport { finalize } from './operators/finalize';\nexport { find } from './operators/find';\nexport { findIndex } from './operators/findIndex';\nexport { first } from './operators/first';\nexport { groupBy } from './operators/groupBy';\nexport { ignoreElements } from './operators/ignoreElements';\nexport { isEmpty } from './operators/isEmpty';\nexport { last } from './operators/last';\nexport { map } from './operators/map';\nexport { mapTo } from './operators/mapTo';\nexport { materialize } from './operators/materialize';\nexport { max } from './operators/max';\nexport { merge } from './operators/merge';\nexport { mergeAll } from './operators/mergeAll';\nexport { mergeMap } from './operators/mergeMap';\nexport { mergeMap as flatMap } from './operators/mergeMap';\nexport { mergeMapTo } from './operators/mergeMapTo';\nexport { mergeScan } from './operators/mergeScan';\nexport { min } from './operators/min';\nexport { multicast } from './operators/multicast';\nexport { observeOn } from './operators/observeOn';\nexport { onErrorResumeNext } from './operators/onErrorResumeNext';\nexport { pairwise } from './operators/pairwise';\nexport { partition } from './operators/partition';\nexport { pluck } from './operators/pluck';\nexport { publish } from './operators/publish';\nexport { publishBehavior } from './operators/publishBehavior';\nexport { publishLast } from './operators/publishLast';\nexport { publishReplay } from './operators/publishReplay';\nexport { race } from './operators/race';\nexport { reduce } from './operators/reduce';\nexport { repeat } from './operators/repeat';\nexport { repeatWhen } from './operators/repeatWhen';\nexport { retry } from './operators/retry';\nexport { retryWhen } from './operators/retryWhen';\nexport { refCount } from './operators/refCount';\nexport { sample } from './operators/sample';\nexport { sampleTime } from './operators/sampleTime';\nexport { scan } from './operators/scan';\nexport { sequenceEqual } from './operators/sequenceEqual';\nexport { share } from './operators/share';\nexport { shareReplay } from './operators/shareReplay';\nexport { single } from './operators/single';\nexport { skip } from './operators/skip';\nexport { skipLast } from './operators/skipLast';\nexport { skipUntil } from './operators/skipUntil';\nexport { skipWhile } from './operators/skipWhile';\nexport { startWith } from './operators/startWith';\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nexport { switchAll } from './operators/switchAll';\nexport { switchMap } from './operators/switchMap';\nexport { switchMapTo } from './operators/switchMapTo';\nexport { take } from './operators/take';\nexport { takeLast } from './operators/takeLast';\nexport { takeUntil } from './operators/takeUntil';\nexport { takeWhile } from './operators/takeWhile';\nexport { tap } from './operators/tap';\nexport { throttle } from './operators/throttle';\nexport { throttleTime } from './operators/throttleTime';\nexport { timeInterval } from './operators/timeInterval';\nexport { timeout } from './operators/timeout';\nexport { timeoutWith } from './operators/timeoutWith';\nexport { timestamp } from './operators/timestamp';\nexport { toArray } from './operators/toArray';\nexport { window } from './operators/window';\nexport { windowCount } from './operators/windowCount';\nexport { windowTime } from './operators/windowTime';\nexport { windowToggle } from './operators/windowToggle';\nexport { windowWhen } from './operators/windowWhen';\nexport { withLatestFrom } from './operators/withLatestFrom';\nexport { zip } from './operators/zip';\nexport { zipAll } from './operators/zipAll';\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/shareReplay';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipLast';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operators/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\nexport { pipe } from './util/pipe';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\nimport * as _operators from './operators';\n\nexport const operators = _operators;\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n","import { Component, ViewChild, ViewContainerRef, Output, ComponentFactoryResolver, OnInit, ApplicationRef, EventEmitter\n} from '@angular/core';\nimport { TimePickerComponent } from '../time-picker/time-picker.component';\nimport { TimePickerConfig } from '../definitions';\n\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport { Subject } from 'rxjs';\nexport class AtpTimePickerComponent implements OnInit {\n   container: ViewContainerRef;\n   timeSelected: EventEmitter<string> = new EventEmitter<string>();\npublic config: TimePickerConfig = {};\n/**\n * @param {?} resolver\n * @param {?} appRef\n */\nconstructor(\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\n  ) {}\n/**\n * @return {?}\n */\nngOnInit() {\n    let /** @type {?} */ config = this.config;\n    config = {\n      time: config.time || '00:00',\n      theme: ['light', 'dark', 'material'].indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {}\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : 'blue' : 'blue',\n      color: config.arrowStyle.color || '#fff'\n    };\n    const /** @type {?} */ cfr = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = this.container.createComponent(cfr);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    tsc.instance.activeModal = true;\n    tsc.instance.isPopup = false;\n    tsc.instance.ParseStringToTime(config.time);\n    tsc.instance.subject.asObservable().subscribe(time => {\n      this.timeSelected.emit(time);\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'atp-time-picker',\n  template: `\n    <div #container></div>\n  `,\n  styles: [`\n    .atp-time-picker .icon-container {\n      display: inline-block;\n      margin-right: .2em; }\n      .atp-time-picker .icon-container svg {\n        cursor: pointer;\n        position: relative;\n        top: .5em; }\n      .atp-time-picker .icon-container /deep/ i {\n        cursor: pointer; }\n  `]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'container': [{ type: ViewChild, args: ['container', { read: ViewContainerRef }, ] },],\n'timeSelected': [{ type: Output },],\n};\n}\n\nfunction AtpTimePickerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpTimePickerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpTimePickerComponent.ctorParameters;\n/** @type {?} */\nAtpTimePickerComponent.propDecorators;\n/** @type {?} */\nAtpTimePickerComponent.prototype.container;\n/** @type {?} */\nAtpTimePickerComponent.prototype.timeSelected;\n/** @type {?} */\nAtpTimePickerComponent.prototype.config;\n/** @type {?} */\nAtpTimePickerComponent.prototype.resolver;\n/** @type {?} */\nAtpTimePickerComponent.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { IDisplayPreference } from './definitions';\n\nconst /** @type {?} */ arabic = new Intl.NumberFormat('ar-AE');\nconst /** @type {?} */ persian = new Intl.NumberFormat('fa-IR');\n\nexport const /** @type {?} */ PersianPreference: IDisplayPreference = {\n  hour: (x) => persian.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = persian.format(x);\n    if (exp.length === 1) {\n      exp = persian.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صبح' : 'عصر',\n  clockHour: (x) => persian.format(x),\n  clockMinute: (x) => persian.format(x),\n  labels: {\n    ok: 'تایید',\n    cancel: 'لغو'\n  }\n};\n\nexport const /** @type {?} */ ArabicPreference: IDisplayPreference = {\n  hour: (x) => arabic.format(x),\n  minute: (x) => {\n    let /** @type {?} */ exp = arabic.format(x);\n    if (exp.length === 1) {\n      exp = arabic.format(0) + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? 'صباحا' : 'مساء',\n  clockHour: (x) => arabic.format(x),\n  clockMinute: (x) => arabic.format(x),\n  labels: {\n    ok: 'حسنا',\n    cancel: 'إلغاء'\n  }\n};\n\nexport const /** @type {?} */ ChinesePreference: IDisplayPreference = {\n  hour:  (x) => x,\n  minute: (x) => {\n    let /** @type {?} */ exp = x;\n    if (exp.length === 1) {\n      exp = '۰' + exp;\n    }\n    return exp;\n  },\n  separator: ':',\n  period: (x) => x === 'AM' ? '上午' : '下午',\n  clockHour: (x) => x,\n  clockMinute: (x) => x,\n  labels: {\n    ok: '确定',\n    cancel: '取消'\n  }\n};\n\nexport const /** @type {?} */ Preference = (locale: string): IDisplayPreference => {\n  switch (locale) {\n    case 'fa':\n        return PersianPreference;\n    case 'ar':\n        return ArabicPreference;\n    case 'zh':\n        return ChinesePreference;\n    default:\n      return null;\n  }\n};\n","import { Injectable, Injector, ApplicationRef, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { TimePickerConfig, IDialogResult } from './definitions';\n\n// We need to import like this, because of backward compatibility of angular\n/* tslint:disable */\n\nimport { Subject } from 'rxjs';\n/* tslint:enable */\n\nimport { Preference } from './preferences';\nexport class AmazingTimePickerService {\n/**\n * @param {?} resolver\n * @param {?} appRef\n * @param {?} injector\n */\nconstructor (\nprivate resolver: ComponentFactoryResolver,\nprivate appRef: ApplicationRef,\nprivate injector: Injector\n  ) {}\n/**\n * @param {?=} config\n * @return {?}\n */\nopen (config?: TimePickerConfig): IDialogResult {\n    const /** @type {?} */ thems = ['light', 'dark', 'material-red', 'material-green', 'material-blue', 'material-purple', 'material-orange'];\n    const /** @type {?} */ _self = this;\n    config = config || {};\n    config = /** @type {?} */(( {\n      time: config.time || '00:00',\n      theme: thems.indexOf(config.theme) > 0 ? config.theme : 'light' || config.theme || 'light',\n      rangeTime: config.rangeTime || {start: '0:0', end: '24:0'},\n      arrowStyle: config.arrowStyle || {},\n      locale: config.locale || 'en',\n      changeToMinutes: config.changeToMinutes,\n      animation: (config.animation == null || config.animation === 'fade') ? 'fade' : (config.animation === 'rotate') ? 'rotate' : false,\n      preference: config.preference || null,\n      onlyHour: config.onlyHour,\n      onlyMinute: config.onlyMinute,\n      onlyAM: config.onlyAM,\n      onlyPM: config.onlyPM,\n    } as TimePickerConfig));\n    config.rangeTime = {\n      start: config.rangeTime.start || '0:0',\n      end: config.rangeTime.end || '24:0',\n    };\n    config.arrowStyle = {\n      background: (config.arrowStyle.background) ?\n      config.arrowStyle.background : config.theme !== undefined ?\n      config.theme === 'dark' ? 'rgb(128, 203, 196)' : '' : '',\n      color: config.arrowStyle.color || ''\n    };\n    const /** @type {?} */ componentRef = this.resolver.resolveComponentFactory(TimePickerComponent);\n    const /** @type {?} */ tsc = componentRef.create(this.injector);\n    this.appRef.attachView(tsc.hostView);\n    const /** @type {?} */ domElem = /** @type {?} */(( ( /** @type {?} */((tsc.hostView as EmbeddedViewRef<any>))).rootNodes[0] as HTMLElement));\n    document.body.appendChild(domElem);\n    tsc.instance.subject = new Subject<any>();\n    tsc.instance._ref = tsc;\n    tsc.instance.appRef = this.appRef;\n    tsc.instance.timerElement = '';\n    tsc.instance.config = config;\n    if (config.preference) {\n      tsc.instance.preference = config.preference;\n    } else {\n      tsc.instance.preference = Preference(config.locale);\n    }\n    tsc.instance.ParseStringToTime(config.time);\n    return {\n      afterClose: function () {\n        return tsc.instance.subject.asObservable();\n      }\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ComponentFactoryResolver, },\n{type: ApplicationRef, },\n{type: Injector, },\n];\n}\n\nfunction AmazingTimePickerService_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerService.ctorParameters;\n/** @type {?} */\nAmazingTimePickerService.prototype.resolver;\n/** @type {?} */\nAmazingTimePickerService.prototype.appRef;\n/** @type {?} */\nAmazingTimePickerService.prototype.injector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Directive, ViewContainerRef, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nexport class AtpDirective implements ControlValueAccessor {\n\n   myClick = new EventEmitter();\nprivate elementRef: ElementRef;\nprivate onChange = (x: any): void => {};\n/**\n * @param {?} viewContainerRef\n * @param {?} atp\n */\nconstructor(\npublic viewContainerRef: ViewContainerRef,\nprivate atp: AmazingTimePickerService) {\n    this.elementRef = this.viewContainerRef.element;\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonClick(e) {\n    const /** @type {?} */ ele = this.viewContainerRef.element.nativeElement;\n    const /** @type {?} */ time = ele.value;\n    const /** @type {?} */ theme = ele.getAttribute('theme');\n    const /** @type {?} */ start = ele.getAttribute('start');\n    const /** @type {?} */ end = ele.getAttribute('end');\n    const /** @type {?} */ locale = ele.getAttribute('locale') || 'en';\n    const /** @type {?} */ changeToMinutes = ele.getAttribute('changeToMinutes') === 'true';\n    const /** @type {?} */ animation = ele.getAttribute('animation');\n    const /** @type {?} */ preference = ele.getAttribute('preference') || null;\n    const /** @type {?} */ onlyHour = ele.getAttribute('onlyHour') === 'true';\n    const /** @type {?} */ onlyMinute = ele.getAttribute('onlyMinute') === 'true';\n    const /** @type {?} */ onlyAM = ele.getAttribute('onlyAM') === 'true';\n    const /** @type {?} */ onlyPM = ele.getAttribute('onlyPM') === 'true';\n    let /** @type {?} */ arrowStyle = ele.getAttribute('arrowStyle');\n    arrowStyle = (arrowStyle) ? JSON.parse(arrowStyle.replace(new RegExp('\\'', 'g'), '\"')) : '';\n    const /** @type {?} */ timePickerFunction = this.atp.open({\n      time,\n      theme,\n      rangeTime: { start, end},\n      'arrowStyle': arrowStyle,\n      locale,\n      changeToMinutes,\n      animation,\n      onlyHour,\n      onlyMinute,\n      onlyAM,\n      onlyPM,\n      preference\n    });\n\n    timePickerFunction.afterClose().subscribe(retTime => {\n      this.writeValue(retTime); // update the native element\n      this.onChange(retTime); // update the form value (if there's a form)\n    });\n  }\n/**\n * @param {?} e\n * @return {?}\n */\nonInput(e: any) {\n    this.onChange(e.srcElement.value);\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nwriteValue(value: any) {\n    if (this.elementRef) {\n      this.elementRef.nativeElement.value = value;\n    }\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnChange(fn: any) {\n    this.onChange = fn;\n  }\n/**\n * @param {?} fn\n * @return {?}\n */\nregisterOnTouched(fn) {  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'input[atp-time-picker]',\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: AtpDirective,\n    multi: true\n  }]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: AmazingTimePickerService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'myClick': [{ type: Output },],\n'onClick': [{ type: HostListener, args: ['click', ['$event'], ] },],\n'onInput': [{ type: HostListener, args: ['input', ['$event'], ] },],\n};\n}\n\nfunction AtpDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nAtpDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAtpDirective.ctorParameters;\n/** @type {?} */\nAtpDirective.propDecorators;\n/** @type {?} */\nAtpDirective.prototype.myClick;\n/** @type {?} */\nAtpDirective.prototype.elementRef;\n/** @type {?} */\nAtpDirective.prototype.onChange;\n/** @type {?} */\nAtpDirective.prototype.viewContainerRef;\n/** @type {?} */\nAtpDirective.prototype.atp;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TimePickerComponent } from './time-picker/time-picker.component';\nimport { AtpTimePickerComponent } from './atp-time-picker/atp-time-picker.component';\nimport { AmazingTimePickerService } from './atp-time-picker.service';\nimport { AtpDirective } from './atp.directive';\nimport { AtpCoreService } from './atp-core.service';\nexport class AmazingTimePickerModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n  ],\n  declarations: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ],\n  providers: [\n    AmazingTimePickerService,\n    AtpCoreService\n  ],\n  entryComponents: [TimePickerComponent],\n  exports: [\n    TimePickerComponent,\n    AtpTimePickerComponent,\n    AtpDirective\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction AmazingTimePickerModule_tsickle_Closure_declarations() {\n/** @type {?} */\nAmazingTimePickerModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAmazingTimePickerModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport {AmazingTimePickerModule,AmazingTimePickerService} from './public_api';\n\nexport {AtpCoreService as ɵb} from './src/app/atp-library/atp-core.service';\nexport {AtpTimePickerComponent as ɵc} from './src/app/atp-library/atp-time-picker/atp-time-picker.component';\nexport {AtpDirective as ɵd} from './src/app/atp-library/atp.directive';\nexport {TimePickerComponent as ɵa} from './src/app/atp-library/time-picker/time-picker.component';"]}