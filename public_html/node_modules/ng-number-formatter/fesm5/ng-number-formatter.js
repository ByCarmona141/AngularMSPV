import { Component, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
var NgNumberFormatterComponent = /** @class */ (function () {
    function NgNumberFormatterComponent() {
    }
    /**
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var incomingNumber = this.ngNumber;
        this.ngNumber = this.nFormatter(Math.abs(parseInt(incomingNumber)), 1);
    };
    /**
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    NgNumberFormatterComponent.prototype.nFormatter = /**
     * @param {?} num
     * @param {?} digits
     * @return {?}
     */
    function (num, digits) {
        /** @type {?} */
        var si = [
            { value: 1E18, symbol: "E" },
            { value: 1E15, symbol: "P" },
            { value: 1E12, symbol: "T" },
            { value: 1E9, symbol: "B" },
            { value: 1E6, symbol: "M" },
            { value: 1E3, symbol: "K" }
        ];
        /** @type {?} */
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        /** @type {?} */
        var i;
        for (i = 0; i < si.length; i++) {
            if (num >= si[i].value) {
                return (num / si[i].value).toFixed(digits).replace(rx, "$1") + si[i].symbol;
            }
        }
        return num.toFixed(digits).replace(rx, "$1");
    };
    /** @nocollapse */
    NgNumberFormatterComponent.ctorParameters = function () { return []; };
NgNumberFormatterComponent.ɵfac = function NgNumberFormatterComponent_Factory(t) { return new (t || NgNumberFormatterComponent)(); };
NgNumberFormatterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NgNumberFormatterComponent, selectors: [["ng-number-formatter"]], inputs: { ngNumber: "ngNumber" }, decls: 2, vars: 1, template: function NgNumberFormatterComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "span");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate(ctx.ngNumber);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNumberFormatterComponent, [{
        type: Component,
        args: [{
                selector: 'ng-number-formatter',
                inputs: ['ngNumber'],
                template: '<span>{{ngNumber}}</span>'
            }]
    }], function () { return []; }, null); })();
    return NgNumberFormatterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgNumberFormatterModule = /** @class */ (function () {
    function NgNumberFormatterModule() {
    }
NgNumberFormatterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgNumberFormatterModule });
NgNumberFormatterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgNumberFormatterModule_Factory(t) { return new (t || NgNumberFormatterModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgNumberFormatterModule, { declarations: function () { return [NgNumberFormatterComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NgNumberFormatterComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgNumberFormatterModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    NgNumberFormatterComponent
                ],
                exports: [
                    NgNumberFormatterComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return NgNumberFormatterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgNumberFormatterModule, NgNumberFormatterComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbnVtYmVyLWZvcm1hdHRlci5qcyIsInNvdXJjZXMiOlsibmctbnVtYmVyLWZvcm1hdHRlci9zcmMvYXBwL21vZHVsZXMvbmctbnVtYmVyLWZvcm1hdHRlci9uZy1udW1iZXItZm9ybWF0dGVyLmNvbXBvbmVudC50cyIsIm5nLW51bWJlci1mb3JtYXR0ZXIvc3JjL2FwcC9tb2R1bGVzL25nLW51bWJlci1mb3JtYXR0ZXIvbmctbnVtYmVyLWZvcm1hdHRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUVVLElBUVI7QUFHSSxLQUhhO0FBQ25CO0FBQ087QUFDSTtBQUFRLElBRGpCLDZDQUFRO0FBQ1I7QUFBbUI7QUFBUSxJQUQzQjtBQUNEO0FBQXlCLFFBQXRCLElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1RSxLQUFHO0FBRUg7QUFBUTtBQUNOO0FBQ1U7QUFBbUI7QUFDNUIsSUFIRCwrQ0FBVTtBQUFPO0FBQ047QUFDVTtBQUNqQjtBQUFRLElBSFosVUFBVyxHQUFHLEVBQUUsTUFBTTtBQUN4QjtBQUNVLFFBRE4sSUFBSSxFQUFFLEdBQUc7QUFDYixZQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ2xDLFlBQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDbEMsWUFBTSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsQyxZQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRyxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ2xDLFlBQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUU7QUFDbEMsWUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUcsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsQyxTQUFLLENBQXFDO0FBQzFDO0FBQXlCLFFBUnJCLElBT0csRUFBRSxHQUFHLDBCQUEwQixDQUFJO0FBQzFDO0FBQXlCLFFBUnJCLElBT29DLENBQUMsQ0FBQztBQUMxQyxRQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNwQyxZQUFNLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsZ0JBQVEsT0FBTyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDcEYsYUFBTztBQUNQLFNBQUs7QUFDTCxRQUFJLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2pELEtBQUcsQ0F6Qk87QUFBQzt1Q0FMVixTQUFTLFNBQUMsekRBS3VCO0dBSmhDLFFBQVEsRUFBRSxxQkFBcUIsc0JBQy9CLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxzQkFDcEIsUUFBUSxFQUFFO0NBQTJCLG1CQUN0Qzs7Ozs7Ozs7Ozs7Ozs7O2dEQU1NO0FBQUMscUNBWlI7QUFBRTtBQUFNO0FBQUM7QUFBSTtBQUFrQztBQUlsQztBQ0piO0FBQ2lCO0FBQ1A7MkRBRVQsUUFBUSxTQUFDO09BQ1IsT0FBTyxFQUFFLDBCQUNQLFlBQVksc0JBQ2Isc0JBQ0QsWUFBWSxFQUFFLDBCQUNaLDBCQUEwQjtjQUMzQjtXQUNEO0dBQU8sRUFBRSwwQkFDUCwwQkFBMEIsc0JBQzNCLGtCQUNGOzs7Ozs7Ozs7Ozs7OztnREFDUztBQUFDLGtDQWZYO0FBQUU7QUFBTTtBQUFDO0FBQUk7QUFDUjtBQUNrQjtBQUFJO0FBQUM7QUFBSTtBQUFrQztBQU01RDtBQUFJO0FBQUM7O0FEUkEsQUFVQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQVBBLEFBT0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQVBBLEFBT0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUE5QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBTkEsQUNBQSxBQUlBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBZEEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1udW1iZXItZm9ybWF0dGVyJyxcbiAgaW5wdXRzOiBbJ25nTnVtYmVyJ10sXG4gIHRlbXBsYXRlOiAnPHNwYW4+e3tuZ051bWJlcn19PC9zcGFuPicsXG59KVxuZXhwb3J0IGNsYXNzIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgbmdOdW1iZXI6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHZhciBpbmNvbWluZ051bWJlciA9IHRoaXMubmdOdW1iZXI7XG4gICAgdGhpcy5uZ051bWJlciA9IHRoaXMubkZvcm1hdHRlciggTWF0aC5hYnMocGFyc2VJbnQoaW5jb21pbmdOdW1iZXIpKSwgMSk7XG4gIH1cblxuICBuRm9ybWF0dGVyKG51bSwgZGlnaXRzKSB7XG4gICAgdmFyIHNpID0gW1xuICAgICAgeyB2YWx1ZTogMUUxOCwgc3ltYm9sOiBcIkVcIiB9LFxuICAgICAgeyB2YWx1ZTogMUUxNSwgc3ltYm9sOiBcIlBcIiB9LFxuICAgICAgeyB2YWx1ZTogMUUxMiwgc3ltYm9sOiBcIlRcIiB9LFxuICAgICAgeyB2YWx1ZTogMUU5LCAgc3ltYm9sOiBcIkJcIiB9LFxuICAgICAgeyB2YWx1ZTogMUU2LCAgc3ltYm9sOiBcIk1cIiB9LFxuICAgICAgeyB2YWx1ZTogMUUzLCAgc3ltYm9sOiBcIktcIiB9XG4gICAgXSwgcnggPSAvXFwuMCskfChcXC5bMC05XSpbMS05XSkwKyQvLCBpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzaS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG51bSA+PSBzaVtpXS52YWx1ZSkge1xuICAgICAgICByZXR1cm4gKG51bSAvIHNpW2ldLnZhbHVlKS50b0ZpeGVkKGRpZ2l0cykucmVwbGFjZShyeCwgXCIkMVwiKSArIHNpW2ldLnN5bWJvbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bS50b0ZpeGVkKGRpZ2l0cykucmVwbGFjZShyeCwgXCIkMVwiKTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50IH0gZnJvbSAnLi9uZy1udW1iZXItZm9ybWF0dGVyLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgTmdOdW1iZXJGb3JtYXR0ZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5nTnVtYmVyRm9ybWF0dGVyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgTmdOdW1iZXJGb3JtYXR0ZXJNb2R1bGUgeyB9XG4iXX0=